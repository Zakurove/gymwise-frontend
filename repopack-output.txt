================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-03T21:55:20.335Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
   a. A separator line (================)
   b. The file path (File: path/to/file)
   c. Another separator line
   d. The full contents of the file
   e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
   original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
   distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
   the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
src/
  components/
    accounts/
      ForgotPasswordForm.js
      LoginForm.js
      PasswordRequirements.js
      RegisterForm.js
    admin/
      AdminPanel.js
    ai-settings/
      AiModelConfig.js
      FeatureImportance.js
      ModelPerformance.js
      PredictionThresholds
    dashboard/
      HighLevelMetrics.js
      PerformanceOverview.js
      QuickInsights.js
      RevenueChart.js
    data-management/
      DataStatusOverview.js
      DataUploadForm.js
    engagement/
      ActiveCampaigns.js
      CampaignCreator.js
      CampaignInsights.js
    layout/
      AuthNavbar.js
      Footer.js
      LangSwitcher.jsx
      Layout.js
      LoadingSpinner.js
      Navbar.js
      PublicNavbar.js
      Sidebar.js
      test.js
      test.module.css
    memberInsights/
      MemberDistributionChart.js
      MemberSegmentBreakdown.js
      RetentionAlerts.js
      WhatIfScenario.js
    members/
      MemberDetailView.js
      MemberListView.js
    reports/
      AnalyticsDashboard.js
      ReportBuilder.js
      ReportList.js
    AINotifications.js
    BookingForm.js
  context/
    AuthContext.js
  hooks/
    useAuthCheck.js
  pages/
    activate/
      [uid]/
        [token].js
    admin/
      panel.js
    members/
      [id].js
      index.js
    posts/
      first-post.js
    reset-password/
      [uid]/
        [token].js
    _app.js
    about-us.js
    ai-settings.js
    blog.js
    book-demo.js
    contact-us.js
    dashboard.js
    data-management.js
    engagement.js
    features.js
    forgot-password.js
    index.js
    login.js
    member-insights.js
    old-dashboard.js
    register.js
    registration-success.js
    reports.js
  redux/
    admin/
      adminActions.js
      adminSlice.js
    auth/
      authActions.js
      authSlice.js
    campaigns/
      campaignsActions.js
      campaignsSlice.js
    insights/
      insightsActions.js
      insightsSlice.js
    members/
      membersActions.js
      membersSlice.js
    metrics/
      metricsActions.js
      metricsSlice.js
    performance/
      performanceActions.js
      performanceSlice.js
    revenue/
      revenueActions.js
      revenueSlice.js
    settings/
      settingsActions.js
      settingsSlice.js
    rootReducer.js
    store.js
  styles/
    global.css
    Home.module.css
    utils.module.css
  utils/
    axiosConfig.js
    mockData.js
  theme.js
.nvmrc
package.json
README.md

================================================================
Repository Files
================================================================

================
File: .nvmrc
================
18

================
File: package.json
================
{
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "start": "next start"
  },
  "dependencies": {
    "@chakra-ui/icons": "^2.1.1",
    "@chakra-ui/next-js": "^2.2.0",
    "@chakra-ui/react": "^2.8.2",
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@reduxjs/toolkit": "^2.2.7",
    "axios": "^1.7.2",
    "framer-motion": "^11.3.0",
    "jwt-decode": "^4.0.0",
    "next": "latest",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-hook-form": "^7.52.1",
    "react-icons": "^5.2.1",
    "react-redux": "^9.1.2",
    "recharts": "^2.12.7",
    "redux": "^5.0.1",
    "redux-persist": "^6.0.0",
    "redux-thunk": "^3.1.0"
  },
  "engines": {
    "node": ">=18"
  }
}

================
File: README.md
================
This is a starter template for [Learn Next.js](https://nextjs.org/learn).

================
File: src\components\accounts\ForgotPasswordForm.js
================
import React from "react";
import { useForm } from "react-hook-form";
import { useDispatch, useSelector } from 'react-redux';
import { 
  Box, Button, Input, FormControl, FormLabel, VStack, Text, Heading, 
  useColorModeValue, useToast, Link as ChakraLink
} from "@chakra-ui/react";
import NextLink from 'next/link';
import { motion } from "framer-motion";
import { forgotPassword } from "../../redux/auth/authActions";

const ForgotPasswordForm = () => {
  const { register, handleSubmit, formState: { errors } } = useForm();
  const dispatch = useDispatch();
  const { loading, error } = useSelector(state => state.auth);
  const toast = useToast();
  const bgColor = useColorModeValue("white", "gray.800");

  const onSubmit = async (data) => {
    try {
      await dispatch(forgotPassword(data.email));
      toast({
        title: "Reset link sent",
        description: "Please check your email for the password reset link.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error.message || "An error occurred. Please try again.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Box bg={bgColor} p={8} rounded="lg" shadow="md" maxW="md" mx="auto">
        <VStack spacing={6}>
          <Heading as="h2" size="xl">Forgot Password</Heading>
          <form onSubmit={handleSubmit(onSubmit)} style={{ width: '100%' }}>
            <VStack spacing={4}>
              <FormControl isInvalid={errors.email}>
                <FormLabel>Email</FormLabel>
                <Input 
                  {...register("email", { 
                    required: "Email is required",
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                      message: "Invalid email address"
                    }
                  })} 
                />
                {errors.email && <Text color="red.500">{errors.email.message}</Text>}
              </FormControl>
              <Button type="submit" colorScheme="blue" width="full" isLoading={loading}>
                Send Reset Link
              </Button>
            </VStack>
          </form>
          {error && <Text color="red.500">{error}</Text>}
          <Text>
            Remember your password?{" "}
            <NextLink href="/login" passHref legacyBehavior>
              <ChakraLink color="blue.500">Login here</ChakraLink>
            </NextLink>
          </Text>
        </VStack>
      </Box>
    </motion.div>
  );
};

export default ForgotPasswordForm;

================
File: src\components\accounts\LoginForm.js
================
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { useDispatch, useSelector } from 'react-redux';
import { 
  Box, Button, Input, FormControl, FormLabel, VStack, Text, Heading, 
  useColorModeValue, useToast, Checkbox, Flex, Link as ChakraLink,
  Spinner
} from "@chakra-ui/react";
import { login } from "../../redux/auth/authActions";
import { useRouter } from "next/router";
import NextLink from 'next/link';
import { motion } from "framer-motion";

const LoginForm = () => {
  const { register, handleSubmit, formState: { errors } } = useForm();
  const dispatch = useDispatch();
  const { loggingIn, error } = useSelector(state => state.auth);  // Change loading to loggingIn
  const [rememberMe, setRememberMe] = useState(false);
  const router = useRouter();
  const bgColor = useColorModeValue("white", "gray.800");
  const toast = useToast();

  const onSubmit = async (data) => {
    try {
      await dispatch(login(data.email, data.password, rememberMe));
      router.push('/dashboard');  // Remove the setTimeout
    } catch (error) {
      toast({
        title: "Login failed",
        description: error.message || "Please try again.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Box bg={bgColor} p={8} rounded="lg" shadow="md" maxW="md" mx="auto">
        <VStack spacing={6}>
          <Heading as="h2" size="xl">Login</Heading>
          <form onSubmit={handleSubmit(onSubmit)} style={{ width: '100%' }}>
            <VStack spacing={4}>
              <FormControl isInvalid={errors.email}>
                <FormLabel>Email</FormLabel>
                <Input 
                  {...register("email", { 
                    required: "Email is required",
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                      message: "Invalid email address"
                    }
                  })} 
                />
                {errors.email && <Text color="red.500">{errors.email.message}</Text>}
              </FormControl>
              <FormControl isInvalid={errors.password}>
                <FormLabel>Password</FormLabel>
                <Input 
                  type="password" 
                  {...register("password", { 
                    required: "Password is required",
                    minLength: { value: 6, message: "Password must be at least 6 characters long" }
                  })} 
                />
                {errors.password && <Text color="red.500">{errors.password.message}</Text>}
              </FormControl>
              <Flex width="100%" justify="space-between" align="center">
                <Checkbox 
                  isChecked={rememberMe} 
                  onChange={(e) => setRememberMe(e.target.checked)}
                >
                  Remember me
                </Checkbox>
                <NextLink href="/forgot-password" passHref legacyBehavior>
                  <ChakraLink color="blue.500">Forgot password?</ChakraLink>
                </NextLink>
              </Flex>
              <Button 
                type="submit" 
                colorScheme="blue" 
                width="full" 
                isLoading={loggingIn}
                loadingText="Logging in"
                spinner={<Spinner color="white" />}
              >
                Login
              </Button>
            </VStack>
          </form>
          {error && <Text color="red.500">{error}</Text>}
          <Text>
            Don't have an account?{" "}
            <NextLink href="/register" passHref legacyBehavior>
              <ChakraLink color="blue.500">Register here</ChakraLink>
            </NextLink>
          </Text>
        </VStack>
      </Box>
    </motion.div>
  );
};

export default LoginForm;

================
File: src\components\accounts\PasswordRequirements.js
================
// components/PasswordRequirements.js
import React from 'react';
import { Text, VStack, HStack } from '@chakra-ui/react';
import { CheckIcon, CloseIcon } from '@chakra-ui/icons';

const Requirement = ({ isMet, text }) => (
  <HStack>
    {isMet ? (
      <CheckIcon color="green.500" />
    ) : (
      <CloseIcon color="red.500" />
    )}
    <Text color={isMet ? "green.500" : "red.500"}>{text}</Text>
  </HStack>
);

const PasswordRequirements = ({ password }) => {
  const requirements = [
    { re: /.{8,}/, text: "At least 8 characters long" },
    { re: /[A-Z]/, text: "At least one uppercase letter" },
    { re: /[a-z]/, text: "At least one lowercase letter" },
    { re: /[0-9]/, text: "At least one number" },
    { re: /[^A-Za-z0-9]/, text: "At least one special character" },
  ];

  return (
    <VStack align="start" spacing={1} mt={2}>
      {requirements.map((req, index) => (
        <Requirement 
          key={index} 
          isMet={password && req.re.test(password)} 
          text={req.text} 
        />
      ))}
    </VStack>
  );
};

export default PasswordRequirements;

================
File: src\components\accounts\RegisterForm.js
================
import React from "react";
import { useForm } from "react-hook-form";
import { useDispatch, useSelector } from 'react-redux';
import { 
  Box, 
  Button, 
  Input, 
  FormControl, 
  FormLabel, 
  VStack, 
  Text, 
  Heading, 
  useColorModeValue, 
  Link as ChakraLink
} from "@chakra-ui/react";
import NextLink from 'next/link';
import { useRouter } from 'next/router';
import { motion } from "framer-motion";
import PasswordRequirements from "./PasswordRequirements";
import { registerUser } from "../../redux/auth/authActions";

const RegisterForm = () => {
  const { register, handleSubmit, formState: { errors }, watch } = useForm();
  const dispatch = useDispatch();
  const { loading, error } = useSelector(state => state.auth);
  const router = useRouter();
  const bgColor = useColorModeValue("white", "gray.800");

  const password = watch("password", "");

  const onSubmit = async (data) => {
    try {
      await dispatch(registerUser(data));
      router.push('/registration-success');
    } catch (error) {
      // Error handling is done in the reducer
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Box bg={bgColor} p={8} rounded="lg" shadow="md" maxW="md" mx="auto">
        <VStack spacing={6}>
          <Heading as="h2" size="xl">Register</Heading>
          <form onSubmit={handleSubmit(onSubmit)} style={{ width: '100%' }}>
            <VStack spacing={4}>
              <FormControl isInvalid={errors.first_name}>
                <FormLabel>First Name</FormLabel>
                <Input {...register("first_name", { required: "First Name is required" })} />
                {errors.first_name && <Text color="red.500">{errors.first_name.message}</Text>}
              </FormControl>
              <FormControl isInvalid={errors.last_name}>
                <FormLabel>Last Name</FormLabel>
                <Input {...register("last_name", { required: "Last Name is required" })} />
                {errors.last_name && <Text color="red.500">{errors.last_name.message}</Text>}
              </FormControl>
              <FormControl isInvalid={errors.email}>
                <FormLabel>Email</FormLabel>
                <Input 
                  {...register("email", { 
                    required: "Email is required",
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                      message: "Invalid email address"
                    }
                  })} 
                />
                {errors.email && <Text color="red.500">{errors.email.message}</Text>}
              </FormControl>
              <FormControl isInvalid={errors.password}>
                <FormLabel>Password</FormLabel>
                <Input 
                  type="password" 
                  {...register("password", { 
                    required: "Password is required",
                    validate: (value) => {
                      const requirements = [
                        { re: /.{8,}/, message: "Be at least 8 characters long" },
                        { re: /[A-Z]/, message: "Contain at least one uppercase letter" },
                        { re: /[a-z]/, message: "Contain at least one lowercase letter" },
                        { re: /[0-9]/, message: "Contain at least one number" },
                        { re: /[^A-Za-z0-9]/, message: "Contain at least one special character" },
                      ];
                      const failedRequirements = requirements.filter(req => !req.re.test(value));
                      return failedRequirements.length === 0 || "Password does not meet all requirements";
                    }
                  })} 
                />
                {errors.password && <Text color="red.500">{errors.password.message}</Text>}
                <PasswordRequirements password={password} />
              </FormControl>
              <Button 
                type="submit" 
                colorScheme="blue" 
                width="full" 
                isLoading={loading}
                isDisabled={Object.keys(errors).length > 0}
              >
                Register
              </Button>
            </VStack>
          </form>
          {error && <Text color="red.500">{error}</Text>}
          <Text>
            Already have an account?{" "}
            <NextLink href="/login" passHref legacyBehavior>
              <ChakraLink color="blue.500">Login here</ChakraLink>
            </NextLink>
          </Text>
        </VStack>
      </Box>
    </motion.div>
  );
};

export default RegisterForm;

================
File: src\components\admin\AdminPanel.js
================
// src/components/admin/AdminPanel.js
import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import {
  Box,
  Heading,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Button,
  useToast,
  Select,
  HStack,
  Input,
  InputGroup,
  InputLeftElement,
  Icon,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Text,
  Spinner,
} from '@chakra-ui/react';
import { SearchIcon } from '@chakra-ui/icons';
import { fetchUsers, activateUser, changeUserRole } from '../../redux/admin/adminActions';

const AdminPanel = () => {
  const dispatch = useDispatch();
  const { users, loading, error } = useSelector(state => state.admin);
  const [searchTerm, setSearchTerm] = useState('');
  const [isDataLoaded, setIsDataLoaded] = useState(false);
  const toast = useToast();

  useEffect(() => {
    const loadData = async () => {
      await dispatch(fetchUsers());
      setIsDataLoaded(true);
    };
    loadData();
  }, [dispatch]);

  const handleActivateUser = async (userId) => {
    try {
      await dispatch(activateUser(userId));
      toast({
        title: 'Success',
        description: 'User activated successfully',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to activate user',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const handleChangeUserRole = async (userId, newRole) => {
    try {
      await dispatch(changeUserRole(userId, newRole));
      toast({
        title: 'Success',
        description: 'User role updated successfully',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: error.message || 'Failed to change user role',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const filteredUsers = users.filter(user => 
    user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
    `${user.first_name} ${user.last_name}`.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const activeUsers = filteredUsers.filter(user => user.is_active);
  const inactiveUsers = filteredUsers.filter(user => !user.is_active);

  const UserTable = ({ users, showActivateButton }) => (
    <Table variant="simple">
      <Thead>
        <Tr>
          <Th>Name</Th>
          <Th>Email</Th>
          <Th>Role</Th>
          <Th>Action</Th>
        </Tr>
      </Thead>
      <Tbody>
        {users.map((user) => (
          <Tr key={user.id}>
            <Td>{`${user.first_name} ${user.last_name}`}</Td>
            <Td>{user.email}</Td>
            <Td>{user.role}</Td>
            <Td>
              <HStack spacing={2}>
                {showActivateButton && (
                  <Button
                    colorScheme="green"
                    size="sm"
                    onClick={() => handleActivateUser(user.id)}
                  >
                    Activate
                  </Button>
                )}
                <Select
                  size="sm"
                  value={user.role}
                  onChange={(e) => handleChangeUserRole(user.id, e.target.value)}
                  isDisabled={user.role === 'superadmin'}
                >
                  <option value="user">User</option>
                  <option value="admin">Admin</option>
                  {user.role === 'superadmin' && (
                    <option value="superadmin">Superadmin</option>
                  )}
                </Select>
              </HStack>
            </Td>
          </Tr>
        ))}
      </Tbody>
    </Table>
  );

  if (loading || !isDataLoaded) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="50vh">
        <Spinner size="xl" />
      </Box>
    );
  }

  if (error) {
    return (
      <Box textAlign="center" mt={10}>
        <Heading size="lg" color="red.500">Error loading admin panel</Heading>
        <Text mt={4}>{error}</Text>
      </Box>
    );
  }

  return (
    <Box>
      <Heading mb={6}>Admin Panel</Heading>
      <InputGroup mb={4}>
        <InputLeftElement pointerEvents="none">
          <Icon as={SearchIcon} color="gray.300" />
        </InputLeftElement>
        <Input
          type="text"
          placeholder="Search users..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </InputGroup>
      <Tabs>
        <TabList>
          <Tab>Active Users ({activeUsers.length})</Tab>
          <Tab>Inactive Users ({inactiveUsers.length})</Tab>
        </TabList>
        <TabPanels>
          <TabPanel>
            <UserTable users={activeUsers} showActivateButton={false} />
          </TabPanel>
          <TabPanel>
            <UserTable users={inactiveUsers} showActivateButton={true} />
          </TabPanel>
        </TabPanels>
      </Tabs>
    </Box>
  );
};

export default AdminPanel;

================
File: src\components\ai-settings\AiModelConfig.js
================
// src/components/ai-settings/AIModelConfig.js

import React from 'react';
import { Box, Heading, VStack, FormControl, FormLabel, Select, Switch, Button, useColorModeValue } from '@chakra-ui/react';

const AIModelConfig = () => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  return (
    <Box bg={bgColor} p={8} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="lg" mb={6}>AI Model Configuration</Heading>
      <VStack spacing={6} align="stretch">
        <FormControl>
          <FormLabel>Model Type</FormLabel>
          <Select defaultValue="xgboost">
            <option value="xgboost">XGBoost</option>
            <option value="randomforest">Random Forest</option>
          </Select>
        </FormControl>
        <FormControl display="flex" alignItems="center">
          <FormLabel htmlFor="auto-retrain" mb="0">
            Enable Auto-Retraining
          </FormLabel>
          <Switch id="auto-retrain" />
        </FormControl>
        <FormControl>
          <FormLabel>Retraining Frequency</FormLabel>
          <Select defaultValue="weekly">
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
            <option value="monthly">Monthly</option>
          </Select>
        </FormControl>
        <Button colorScheme="brand">Save Configuration</Button>
      </VStack>
    </Box>
  );
};

export default AIModelConfig;

================
File: src\components\ai-settings\FeatureImportance.js
================
// src/components/ai-settings/FeatureImportance.js

import React from 'react';
import { Box, Heading, VStack, Text, Progress, HStack, useColorModeValue } from '@chakra-ui/react';

const FeatureImportance = () => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  const features = [
    { name: 'Visit Frequency', importance: 0.35 },
    { name: 'Membership Duration', importance: 0.25 },
    { name: 'Age', importance: 0.15 },
    { name: 'Class Attendance', importance: 0.12 },
    { name: 'Payment History', importance: 0.08 },
    { name: 'Gender', importance: 0.05 },
  ];

  return (
    <Box bg={bgColor} p={8} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="lg" mb={6}>Feature Importance</Heading>
      <VStack spacing={4} align="stretch">
        {features.map((feature, index) => (
          <Box key={index}>
            <HStack justify="space-between" mb={2}>
              <Text fontWeight="medium">{feature.name}</Text>
              <Text>{(feature.importance * 100).toFixed(1)}%</Text>
            </HStack>
            <Progress value={feature.importance * 100} size="sm" colorScheme="brand" />
          </Box>
        ))}
      </VStack>
    </Box>
  );
};

export default FeatureImportance;

================
File: src\components\ai-settings\ModelPerformance.js
================
// src/components/ai-settings/ModelPerformance.js

import React from 'react';
import { Box, Heading, VStack, Text, SimpleGrid, Stat, StatLabel, StatNumber, StatHelpText, StatArrow, Button, useColorModeValue } from '@chakra-ui/react';

const ModelPerformance = () => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  const metrics = [
    { label: 'Accuracy', value: 0.92, change: 0.03, increase: true },
    { label: 'Precision', value: 0.89, change: 0.02, increase: true },
    { label: 'Recall', value: 0.94, change: 0.01, increase: false },
    { label: 'F1 Score', value: 0.91, change: 0.02, increase: true },
  ];

  return (
    <Box bg={bgColor} p={8} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="lg" mb={6}>Model Performance</Heading>
      <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6} mb={6}>
        {metrics.map((metric, index) => (
          <Stat key={index}>
            <StatLabel>{metric.label}</StatLabel>
            <StatNumber>{metric.value.toFixed(2)}</StatNumber>
            <StatHelpText>
              <StatArrow type={metric.increase ? 'increase' : 'decrease'} />
              {metric.change.toFixed(2)}
            </StatHelpText>
          </Stat>
        ))}
      </SimpleGrid>
      <Text mb={4}>Last trained: 2023-05-15 09:30 AM</Text>
      <Button colorScheme="brand">Retrain Model</Button>
    </Box>
  );
};

export default ModelPerformance;

================
File: src\components\ai-settings\PredictionThresholds
================
// src/components/ai-settings/PredictionThresholds.js

import React from 'react';
import { Box, Heading, VStack, FormControl, FormLabel, Slider, SliderTrack, SliderFilledTrack, SliderThumb, Text, Button, useColorModeValue } from '@chakra-ui/react';

const PredictionThresholds = () => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  return (
    <Box bg={bgColor} p={8} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="lg" mb={6}>Prediction Thresholds</Heading>
      <VStack spacing={6} align="stretch">
        <FormControl>
          <FormLabel>Churn Risk Threshold</FormLabel>
          <Slider defaultValue={70} min={0} max={100} step={1}>
            <SliderTrack>
              <SliderFilledTrack />
            </SliderTrack>
            <SliderThumb boxSize={6} />
          </Slider>
          <Text mt={2}>Members with a churn probability above this threshold will be flagged as high risk.</Text>
        </FormControl>
        <FormControl>
          <FormLabel>Engagement Score Threshold</FormLabel>
          <Slider defaultValue={50} min={0} max={100} step={1}>
            <SliderTrack>
              <SliderFilledTrack />
            </SliderTrack>
            <SliderThumb boxSize={6} />
          </Slider>
          <Text mt={2}>Members with an engagement score below this threshold will be considered disengaged.</Text>
        </FormControl>
        <Button colorScheme="brand">Save Thresholds</Button>
      </VStack>
    </Box>
  );
};

export default PredictionThresholds;

================
File: src\components\AINotifications.js
================
// src/components/AINotifications.js

import React, { useState, useEffect } from 'react';
import {
  Box,
  VStack,
  Text,
  Icon,
  Badge,
  useColorModeValue,
  Popover,
  PopoverTrigger,
  PopoverContent,
  PopoverHeader,
  PopoverBody,
  PopoverArrow,
  PopoverCloseButton,
  Button,
} from '@chakra-ui/react';
import { FiBell } from 'react-icons/fi';
import axios from 'axios';

const AINotifications = () => {
    const [notifications, setNotifications] = useState([]);
    const bgColor = useColorModeValue('white', 'gray.700');
    const borderColor = useColorModeValue('gray.200', 'gray.600');
  
    useEffect(() => {
      const fetchNotifications = async () => {
        try {
          const response = await axios.get('/ai/member-insights/');
          // Convert insights to notifications
          const newNotifications = response.data.map((insight, index) => ({
            id: index,
            message: insight.message,
            urgent: insight.type === 'high_risk',
          }));
          setNotifications(newNotifications);
        } catch (error) {
          console.error("Error fetching notifications:", error);
        }
      };
  
      fetchNotifications();
    }, []);

  return (
    <Popover placement="bottom-end">
      <PopoverTrigger>
        <Button variant="ghost" size="md">
          <Icon as={FiBell} boxSize={5} />
          {notifications.length > 0 && (
            <Badge colorScheme="red" borderRadius="full" ml={1}>
              {notifications.length}
            </Badge>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent bg={bgColor} borderColor={borderColor}>
        <PopoverArrow />
        <PopoverCloseButton />
        <PopoverHeader fontWeight="bold">AI Notifications</PopoverHeader>
        <PopoverBody>
          <VStack spacing={3} align="stretch">
            {notifications.map((notification) => (
              <Box key={notification.id} p={2} borderWidth={1} borderRadius="md">
                <Text fontSize="sm">
                  {notification.urgent && (
                    <Badge colorScheme="red" mr={2}>
                      Urgent
                    </Badge>
                  )}
                  {notification.message}
                </Text>
              </Box>
            ))}
          </VStack>
        </PopoverBody>
      </PopoverContent>
    </Popover>
  );
};

export default AINotifications;

================
File: src\components\BookingForm.js
================
import { useState } from "react";
import { Box, Button, Input, FormControl, FormLabel, VStack, useToast, Heading, useColorModeValue } from "@chakra-ui/react";
import axios from "axios";

const BookingForm = () => {
  const [formData, setFormData] = useState({ name: "", email: "", phone: "", preferred_date: "" });
  const toast = useToast();
  const bgColor = useColorModeValue("white", "gray.800");

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("http://localhost:8000/api/book-demo/", formData);
      if (response.status === 201) {
        toast({
          title: "Demo booked.",
          description: "We've received your demo booking request.",
          status: "success",
          duration: 5000,
          isClosable: true,
        });
        setFormData({ name: "", email: "", phone: "", preferred_date: "" });
      }
    } catch (error) {
      toast({
        title: "An error occurred.",
        description: "Unable to book demo.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    }
  };

  return (
    <Box bg={bgColor} p={8} rounded="lg" shadow="md" maxW="md" mx="auto">
      <VStack spacing={6}>
        <Heading as="h2" size="xl">Book a Demo</Heading>
        <form onSubmit={handleSubmit} style={{ width: '100%' }}>
          <VStack spacing={4}>
            <FormControl isRequired>
              <FormLabel>Name</FormLabel>
              <Input name="name" value={formData.name} onChange={handleChange} />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Email</FormLabel>
              <Input name="email" type="email" value={formData.email} onChange={handleChange} />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Phone</FormLabel>
              <Input name="phone" value={formData.phone} onChange={handleChange} />
            </FormControl>
            <FormControl isRequired>
              <FormLabel>Preferred Demo Date</FormLabel>
              <Input name="preferred_date" type="date" value={formData.preferred_date} onChange={handleChange} />
            </FormControl>
            <Button type="submit" colorScheme="brand" width="full">
              Book Demo
            </Button>
          </VStack>
        </form>
      </VStack>
    </Box>
  );
};

export default BookingForm;

================
File: src\components\dashboard\HighLevelMetrics.js
================
import React from 'react';
import { useSelector } from 'react-redux';
import { SimpleGrid, Box, Text, Icon, Flex, useColorModeValue } from '@chakra-ui/react';
import { FiDollarSign, FiUsers, FiPercent, FiStar, FiUserPlus, FiActivity } from 'react-icons/fi';

const HighLevelMetrics = () => {
  const { metrics, loading, error } = useSelector(state => state.metrics);
  const bgColor = useColorModeValue('white', 'gray.700');
  const textColor = useColorModeValue('gray.600', 'gray.200');
  const borderColor = useColorModeValue('gray.100', 'gray.600');

  if (loading) {
    return <Text>Loading metrics...</Text>;
  }

  if (error) {
    return <Text color="red.500">Error loading metrics: {error}</Text>;
  }

  const metricIcons = {
    totalRevenue: FiDollarSign,
    activeMembers: FiUsers,
    avgRetentionRate: FiPercent,
    netPromoterScore: FiStar,
    newSignUps: FiUserPlus,
    avgDailyVisits: FiActivity,
  };

  return (
    <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>
      {Object.entries(metrics).map(([key, metric]) => (
        <Box 
          key={key} 
          bg={bgColor} 
          p={6} 
          borderRadius="lg" 
          borderWidth={1} 
          borderColor={borderColor}
          boxShadow="xl"
          transition="all 0.3s"
          _hover={{ transform: 'translateY(-5px)', shadow: '2xl' }}
        >
          <Flex justifyContent="space-between" alignItems="flex-start">
            <Box>
              <Text fontSize="sm" color={textColor} fontWeight="medium" mb={2}>
                {metric.label}
              </Text>
              <Text fontSize="3xl" fontWeight="bold" color={metric.color}>
                {metric.value}
              </Text>
              <Text fontSize="sm" color={metric.change >= 0 ? "green.500" : "red.500"} mt={2}>
                {metric.change >= 0 ? "↑" : "↓"} {Math.abs(metric.change)}%
              </Text>
            </Box>
            <Box p={3} bg={`${metric.color}20`} borderRadius="full">
              <Icon as={metricIcons[key]} w={6} h={6} color={metric.color} />
            </Box>
          </Flex>
        </Box>
      ))}
    </SimpleGrid>
  );
};

export default HighLevelMetrics;

================
File: src\components\dashboard\PerformanceOverview.js
================
import React from 'react';
import { useSelector } from 'react-redux';
import { Box, Heading, Text, SimpleGrid, Flex, Icon, useColorModeValue } from '@chakra-ui/react';
import { FiTrendingUp, FiUserCheck, FiDollarSign, FiAward } from 'react-icons/fi';

const PerformanceOverview = () => {
  const { performanceData, loading, error } = useSelector(state => state.performance);
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');
  const textColor = useColorModeValue('gray.600', 'gray.200');

  if (loading) {
    return <Text>Loading performance data...</Text>;
  }

  if (error) {
    return <Text color="red.500">Error loading performance data: {error}</Text>;
  }

  const icons = {
    revenueGrowth: FiTrendingUp,
    memberRetention: FiUserCheck,
    avgRevenuePerMember: FiDollarSign,
    customerSatisfaction: FiAward,
  };

  return (
    <Box bg={bgColor} p={6} borderRadius="lg" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="md" mb={6}>Performance Overview</Heading>
      <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
        {Object.entries(performanceData).map(([key, item]) => (
          <Box 
            key={key} 
            borderRadius="md" 
            overflow="hidden"
            position="relative"
          >
            <Box 
              bg={`${item.color}20`} 
              p={4} 
              position="relative" 
              zIndex={1}
            >
              <Flex justify="space-between" align="center">
                <Box>
                  <Text fontSize="sm" fontWeight="medium" color={textColor}>
                    {item.label}
                  </Text>
                  <Text fontSize="2xl" fontWeight="bold" color={item.color}>
                    {item.value}
                  </Text>
                </Box>
                <Icon as={icons[key]} color={item.color} boxSize={8} />
              </Flex>
            </Box>
            <Box 
              position="absolute" 
              bottom={0} 
              left={0} 
              right={0} 
              height={`${parseFloat(item.value)}%`} 
              bg={`${item.color}40`} 
              transition="height 0.3s ease-in-out"
            />
          </Box>
        ))}
      </SimpleGrid>
    </Box>
  );
};

export default PerformanceOverview;

================
File: src\components\dashboard\QuickInsights.js
================
import React from 'react';
import { useSelector } from 'react-redux';
import { Box, Heading, Text, VStack, HStack, Icon, Flex, Badge, useColorModeValue } from '@chakra-ui/react';
import { FiTrendingUp, FiAlertCircle, FiCheckCircle, FiUsers } from 'react-icons/fi';

const QuickInsights = () => {
  const { insights, loading, error } = useSelector(state => state.insights);
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');
  const textColor = useColorModeValue('gray.600', 'gray.200');

  if (loading) {
    return <Text>Loading insights...</Text>;
  }

  if (error) {
    return <Text color="red.500">Error loading insights: {error}</Text>;
  }

  const icons = {
    revenue: FiTrendingUp,
    retention: FiAlertCircle,
    engagement: FiUsers,
  };

  return (
    <Box bg={bgColor} p={6} borderRadius="lg" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="md" mb={6}>Quick Insights</Heading>
      <VStack align="stretch" spacing={4}>
        {insights.map((insight, index) => (
          <Box 
            key={index} 
            p={4} 
            borderRadius="md" 
            borderWidth={1} 
            borderColor={borderColor}
            transition="all 0.3s"
            _hover={{ transform: 'translateY(-2px)', shadow: 'md' }}
          >
            <Flex alignItems="center" justifyContent="space-between">
              <HStack spacing={4}>
                <Icon as={icons[insight.category] || FiCheckCircle} color={insight.color} boxSize={6} />
                <VStack align="start" spacing={0}>
                  <Text fontWeight="bold">{insight.text}</Text>
                  <Text fontSize="sm" color={textColor}>{insight.subtext}</Text>
                </VStack>
              </HStack>
              <Badge colorScheme={insight.positive ? "green" : "red"}>
                {insight.positive ? "Positive" : "Needs Attention"}
              </Badge>
            </Flex>
          </Box>
        ))}
      </VStack>
    </Box>
  );
};

export default QuickInsights;

================
File: src\components\dashboard\RevenueChart.js
================
import React from 'react';
import { useSelector } from 'react-redux';
import { Box, Heading, Flex, Text, HStack, VStack, Icon, useColorModeValue, Spinner } from '@chakra-ui/react';
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { FiTrendingUp, FiDollarSign } from 'react-icons/fi';

const RevenueChart = () => {
  const { revenueData, loading, error } = useSelector(state => state.revenue);
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');
  const textColor = useColorModeValue('gray.600', 'gray.200');

  if (loading) {
    return (
      <Box bg={bgColor} p={6} borderRadius="lg" borderWidth={1} borderColor={borderColor} boxShadow="xl">
        <Flex justify="center" align="center" height="300px">
          <Spinner size="xl" />
        </Flex>
      </Box>
    );
  }

  if (error) {
    return (
      <Box bg={bgColor} p={6} borderRadius="lg" borderWidth={1} borderColor={borderColor} boxShadow="xl">
        <Text color="red.500">Error loading revenue data: {error}</Text>
      </Box>
    );
  }

  if (!revenueData || revenueData.length === 0) {
    return (
      <Box bg={bgColor} p={6} borderRadius="lg" borderWidth={1} borderColor={borderColor} boxShadow="xl">
        <Text>No revenue data available.</Text>
      </Box>
    );
  }

  const currentYearTotal = revenueData.reduce((sum, item) => sum + item.revenue, 0);
  const lastYearTotal = revenueData.reduce((sum, item) => sum + item.lastYear, 0);
  const growthRate = ((currentYearTotal - lastYearTotal) / lastYearTotal * 100).toFixed(1);

  return (
    <Box bg={bgColor} p={6} borderRadius="lg" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Flex justifyContent="space-between" alignItems="center" mb={6}>
        <Heading size="md">Revenue Overview</Heading>
        <HStack spacing={4}>
          <VStack align="flex-end" spacing={0}>
            <Text fontSize="sm" color={textColor}>Total Revenue</Text>
            <Text fontWeight="bold" fontSize="xl">${currentYearTotal.toLocaleString()}</Text>
          </VStack>
          <Box p={2} bg="green.100" borderRadius="full">
            <Icon as={FiTrendingUp} color="green.500" boxSize={6} />
          </Box>
        </HStack>
      </Flex>
      <ResponsiveContainer width="100%" height={300}>
        <AreaChart data={revenueData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="month" />
          <YAxis />
          <Tooltip />
          <Area type="monotone" dataKey="revenue" stroke="#319795" fill="#319795" fillOpacity={0.3} />
          <Area type="monotone" dataKey="lastYear" stroke="#718096" fill="#718096" fillOpacity={0.3} />
        </AreaChart>
      </ResponsiveContainer>
      <Flex justifyContent="space-between" alignItems="center" mt={6}>
        <HStack spacing={4}>
          <Box w={4} h={4} bg="#319795" borderRadius="full" />
          <Text fontWeight="medium" color="brand.500">This Year</Text>
        </HStack>
        <HStack spacing={4}>
          <Box w={4} h={4} bg="#718096" borderRadius="full" />
          <Text fontWeight="medium" color="gray.500">Last Year</Text>
        </HStack>
        <HStack spacing={2}>
          <Icon as={FiDollarSign} color="green.500" />
          <Text fontWeight="bold" color="green.500">{growthRate}% Growth</Text>
        </HStack>
      </Flex>
    </Box>
  );
};

export default RevenueChart;

================
File: src\components\data-management\DataStatusOverview.js
================
import React from 'react';
import { useSelector } from 'react-redux';
import { Box, Heading, VStack, HStack, Text, Icon, useColorModeValue, Progress } from '@chakra-ui/react';
import { FiDatabase, FiClock, FiCheckCircle, FiAlertCircle } from 'react-icons/fi';

const DataStatusOverview = () => {
  const { user } = useSelector(state => state.auth);
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  // Mock data - in a real application, this would come from your Redux store
  const dataStatus = {
    lastUpdate: '2023-05-15 14:30',
    totalRecords: 15000,
    processedRecords: 14850,
    dataQuality: 98.5,
  };

  return (
    <Box bg={bgColor} p={8} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="lg" mb={6}>Data Status Overview for {user?.institution?.name}</Heading>
      <VStack spacing={6} align="stretch">
        <HStack spacing={4}>
          <Icon as={FiClock} color="brand.500" boxSize={6} />
          <Text fontWeight="bold">Last Update:</Text>
          <Text>{dataStatus.lastUpdate}</Text>
        </HStack>
        <HStack spacing={4}>
          <Icon as={FiDatabase} color="brand.500" boxSize={6} />
          <Text fontWeight="bold">Total Records:</Text>
          <Text>{dataStatus.totalRecords.toLocaleString()}</Text>
        </HStack>
        <Box>
          <HStack spacing={4} mb={2}>
            <Icon as={FiCheckCircle} color="green.500" boxSize={6} />
            <Text fontWeight="bold">Processed Records:</Text>
            <Text>{dataStatus.processedRecords.toLocaleString()} / {dataStatus.totalRecords.toLocaleString()}</Text>
          </HStack>
          <Progress value={(dataStatus.processedRecords / dataStatus.totalRecords) * 100} size="sm" colorScheme="green" />
        </Box>
        <Box>
          <HStack spacing={4} mb={2}>
            <Icon as={FiAlertCircle} color={dataStatus.dataQuality >= 95 ? "green.500" : "orange.500"} boxSize={6} />
            <Text fontWeight="bold">Data Quality Score:</Text>
            <Text>{dataStatus.dataQuality}%</Text>
          </HStack>
          <Progress value={dataStatus.dataQuality} size="sm" colorScheme={dataStatus.dataQuality >= 95 ? "green" : "orange"} />
        </Box>
      </VStack>
    </Box>
  );
};

export default DataStatusOverview;

================
File: src\components\data-management\DataUploadForm.js
================
import React, { useState } from 'react';
import { useSelector } from 'react-redux';
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Input,
  VStack,
  Text,
  Progress,
  useColorModeValue,
  useToast,
  Heading
} from '@chakra-ui/react';
import { FiUpload } from 'react-icons/fi';
import axios from 'axios';

const DataUploadForm = () => {
  const [file, setFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [errors, setErrors] = useState([]);
  const { user } = useSelector(state => state.auth);
  const toast = useToast();

  const bgColor = useColorModeValue('white', 'gray.700');

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
    setErrors([]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!file) {
      setErrors(['Please select a file to upload']);
      return;
    }

    setUploading(true);
    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await axios.post('/api/upload-data', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setUploadProgress(percentCompleted);
        },
      });

      toast({
        title: 'Upload Successful',
        description: 'Your data has been uploaded and is being processed.',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });

      // Reset form
      setFile(null);
      setUploadProgress(0);
    } catch (error) {
      console.error('Upload failed:', error);
      setErrors(['Upload failed. Please try again.']);
      toast({
        title: 'Upload Failed',
        description: 'There was an error uploading your data. Please try again.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setUploading(false);
    }
  };

  return (
    <Box bg={bgColor} p={6} borderRadius="lg" boxShadow="md">
      <form onSubmit={handleSubmit}>
        <VStack spacing={4} align="stretch">
          <Heading size="md">Upload Member Data</Heading>
          <Text>Upload CSV file containing member data for {user?.institution?.name}</Text>
          <FormControl>
            <FormLabel>Select CSV File</FormLabel>
            <Input type="file" accept=".csv" onChange={handleFileChange} />
          </FormControl>
          {errors.length > 0 && (
            <Box color="red.500">
              {errors.map((error, index) => (
                <Text key={index}>{error}</Text>
              ))}
            </Box>
          )}
          {uploading && (
            <Progress value={uploadProgress} size="sm" colorScheme="blue" />
          )}
          <Button
            leftIcon={<FiUpload />}
            colorScheme="blue"
            type="submit"
            isLoading={uploading}
            loadingText="Uploading..."
          >
            Upload Data
          </Button>
        </VStack>
      </form>
    </Box>
  );
};

export default DataUploadForm;

================
File: src\components\engagement\ActiveCampaigns.js
================
import React from 'react';
import { Box, Heading, Table, Thead, Tbody, Tr, Th, Td, Badge, Button, useColorModeValue, Text, Flex, Icon, Progress, VStack} from '@chakra-ui/react';
import { FiEye, FiEdit2, FiPauseCircle, FiPlayCircle } from 'react-icons/fi';

const ActiveCampaigns = ({ campaigns }) => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');

  return (
    <Box bg={bgColor} p={6} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Flex justifyContent="space-between" alignItems="center" mb={6}>
        <Heading size="lg">Active Campaigns</Heading>
        <Button colorScheme="brand" size="sm">View All</Button>
      </Flex>
      <Box overflowX="auto">
        <Table variant="simple">
          <Thead>
            <Tr>
              <Th>Name</Th>
              <Th>Segment</Th>
              <Th>Type</Th>
              <Th>Status</Th>
              <Th>Performance</Th>
              <Th>Actions</Th>
            </Tr>
          </Thead>
          <Tbody>
            {campaigns.map((campaign, index) => (
              <Tr key={index}>
                <Td fontWeight="medium">{campaign.name}</Td>
                <Td>{campaign.target_segment}</Td>
                <Td>{campaign.campaign_type}</Td>
                <Td>
                  <Badge colorScheme={campaign.status === 'Active' ? 'green' : 'yellow'} borderRadius="full" px={2}>
                    {campaign.status}
                  </Badge>
                </Td>
                <Td>
                  <VStack align="start" spacing={1}>
                    <Text fontSize="sm">Open Rate: {(campaign.avg_open_rate * 100).toFixed(2)}%</Text>
                    <Progress value={campaign.avg_open_rate * 100} size="sm" colorScheme="green" width="100%" />
                    <Text fontSize="sm">Click Rate: {(campaign.avg_click_rate * 100).toFixed(2)}%</Text>
                    <Progress value={campaign.avg_click_rate * 100} size="sm" colorScheme="blue" width="100%" />
                    <Text fontSize="sm">Conversion: {(campaign.avg_conversion_rate * 100).toFixed(2)}%</Text>
                    <Progress value={campaign.avg_conversion_rate * 100} size="sm" colorScheme="purple" width="100%" />
                  </VStack>
                </Td>
                <Td>
                  <Flex gap={2}>
                    <Button size="sm" variant="ghost" colorScheme="blue"><Icon as={FiEye} /></Button>
                    <Button size="sm" variant="ghost" colorScheme="green"><Icon as={FiEdit2} /></Button>
                    <Button size="sm" variant="ghost" colorScheme="red">
                      <Icon as={campaign.status === 'Active' ? FiPauseCircle : FiPlayCircle} />
                    </Button>
                  </Flex>
                </Td>
              </Tr>
            ))}
          </Tbody>
        </Table>
      </Box>
    </Box>
  );
};

export default ActiveCampaigns;

================
File: src\components\engagement\CampaignCreator.js
================
import React, { useState } from 'react';
import {
  Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton,
  Button, VStack, FormControl, FormLabel, Input, Select, Textarea, Switch, 
  Tabs, TabList, TabPanels, Tab, TabPanel, Box, Text, useColorModeValue, useToast,
  Alert, AlertIcon, AlertTitle, AlertDescription,
} from '@chakra-ui/react';
import { FiSend } from 'react-icons/fi';
import axios from 'axios';

const CampaignCreator = ({ isOpen, onClose, suggestions, onCampaignCreated }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const steps = ['Select Template', 'Customize', 'Review'];
  const toast = useToast();

  const [campaignData, setCampaignData] = useState({
    name: '',
    target_segment: '',
    campaign_type: '',
    message: '',
    start_date: '',
    end_date: '',
    ai_optimization: true
  });

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setCampaignData({
      ...campaignData,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  const handleTemplateSelection = (suggestion) => {
    setCampaignData({
      ...campaignData,
      target_segment: suggestion.target_segment,
      campaign_type: suggestion.campaign_type,
      message: suggestion.message_template,
    });
    setCurrentStep(1);
  };

  const handleNext = () => setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
  const handlePrev = () => setCurrentStep((prev) => Math.max(prev - 1, 0));

  const handleSubmit = async () => {
    try {
      await axios.post('/ai/create-campaign/', campaignData);
      toast({
        title: "Campaign created",
        description: "Your campaign has been successfully created.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      onCampaignCreated();
      onClose();
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to create campaign. Please try again.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="xl">
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>Create New Campaign</ModalHeader>
        <ModalCloseButton />
        <ModalBody>
          <Tabs index={currentStep} onChange={setCurrentStep}>
            <TabList>
              {steps.map((step, index) => (
                <Tab key={index}>{step}</Tab>
              ))}
            </TabList>
            <TabPanels>
              <TabPanel>
                <VStack spacing={4} align="stretch">
                  <Text fontWeight="bold">AI-Suggested Campaigns</Text>
                  {suggestions.map((suggestion, index) => (
                    <Alert
                      key={index}
                      status="info"
                      variant="subtle"
                      flexDirection="column"
                      alignItems="start"
                      justifyContent="space-between"
                      textAlign="left"
                      p={4}
                      borderRadius="md"
                      cursor="pointer"
                      onClick={() => handleTemplateSelection(suggestion)}
                      _hover={{ bg: useColorModeValue('blue.50', 'blue.900') }}
                    >
                      <AlertTitle mb={1}>{suggestion.campaign_type} for {suggestion.target_segment}</AlertTitle>
                      <AlertDescription>
                        <Text mb={2}>Target: {suggestion.member_count} members</Text>
                        <Text>{suggestion.message_template}</Text>
                      </AlertDescription>
                      <Button mt={2} size="sm" colorScheme="blue">Use This Template</Button>
                    </Alert>
                  ))}
                </VStack>
              </TabPanel>
              <TabPanel>
                <VStack spacing={4}>
                  <FormControl isRequired>
                    <FormLabel>Campaign Name</FormLabel>
                    <Input name="name" value={campaignData.name} onChange={handleInputChange} placeholder="Enter campaign name" />
                  </FormControl>
                  <FormControl isRequired>
                    <FormLabel>Target Segment</FormLabel>
<Input name="target_segment" value={campaignData.target_segment} onChange={handleInputChange} placeholder="Enter target segment" />
                  </FormControl>
                  <FormControl isRequired>
                    <FormLabel>Campaign Type</FormLabel>
                    <Input name="campaign_type" value={campaignData.campaign_type} onChange={handleInputChange} placeholder="Enter campaign type" />
                  </FormControl>
                  <FormControl isRequired>
                    <FormLabel>Message</FormLabel>
                    <Textarea name="message" value={campaignData.message} onChange={handleInputChange} placeholder="Enter campaign message" rows={5} />
                  </FormControl>
                  <FormControl isRequired>
                    <FormLabel>Start Date</FormLabel>
                    <Input name="start_date" type="date" value={campaignData.start_date} onChange={handleInputChange} />
                  </FormControl>
                  <FormControl isRequired>
                    <FormLabel>End Date</FormLabel>
                    <Input name="end_date" type="date" value={campaignData.end_date} onChange={handleInputChange} />
                  </FormControl>
                  <FormControl display="flex" alignItems="center">
                    <FormLabel htmlFor="ai-optimization" mb="0">
                      Enable AI Optimization
                    </FormLabel>
                    <Switch name="ai_optimization" isChecked={campaignData.ai_optimization} onChange={handleInputChange} id="ai-optimization" colorScheme="brand" />
                  </FormControl>
                </VStack>
              </TabPanel>
              <TabPanel>
                <VStack spacing={4} align="start">
                  <Text><strong>Campaign Name:</strong> {campaignData.name}</Text>
                  <Text><strong>Target Segment:</strong> {campaignData.target_segment}</Text>
                  <Text><strong>Campaign Type:</strong> {campaignData.campaign_type}</Text>
                  <Text><strong>Message:</strong> {campaignData.message}</Text>
                  <Text><strong>Start Date:</strong> {campaignData.start_date}</Text>
                  <Text><strong>End Date:</strong> {campaignData.end_date}</Text>
                  <Text><strong>AI Optimization:</strong> {campaignData.ai_optimization ? 'Enabled' : 'Disabled'}</Text>
                </VStack>
              </TabPanel>
            </TabPanels>
          </Tabs>
        </ModalBody>
        <ModalFooter>
          {currentStep > 0 && (
            <Button mr={3} onClick={handlePrev}>
              Previous
            </Button>
          )}
          {currentStep < steps.length - 1 ? (
            <Button colorScheme="brand" onClick={handleNext}>
              Next
            </Button>
          ) : (
            <Button colorScheme="brand" onClick={handleSubmit}>
              Create Campaign
            </Button>
          )}
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

export default CampaignCreator;

================
File: src\components\engagement\CampaignInsights.js
================
// src/components/engagement/CampaignInsights.js

import React, { useState, useEffect } from 'react';
import { Box, Heading, SimpleGrid, Stat, StatLabel, StatNumber, StatHelpText, StatArrow, useColorModeValue } from '@chakra-ui/react';
import axios from 'axios';

const CampaignInsights = () => {
  const [insights, setInsights] = useState([]);
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');

  useEffect(() => {
    const fetchInsights = async () => {
      try {
        const response = await axios.get('/ai/campaign-insights/');
        setInsights(response.data);
      } catch (error) {
        console.error('Error fetching campaign insights:', error);
      }
    };
    fetchInsights();
  }, []);

  return (
    <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6}>
      {insights.map((stat, index) => (
        <Box key={index} bg={bgColor} p={6} borderRadius="lg" borderWidth={1} borderColor={borderColor} boxShadow="md">
          <Stat>
            <StatLabel fontSize="sm" fontWeight="medium">{stat.label}</StatLabel>
            <StatNumber fontSize="3xl" fontWeight="bold">{stat.value}</StatNumber>
            <StatHelpText>
              <StatArrow type={stat.change > 0 ? 'increase' : 'decrease'} />
              {Math.abs(stat.change)}%
            </StatHelpText>
          </Stat>
        </Box>
      ))}
    </SimpleGrid>
  );
};

export default CampaignInsights;

================
File: src\components\layout\AuthNavbar.js
================
import React from "react";
import { useSelector, useDispatch } from 'react-redux';
import {
  Box,
  Flex,
  IconButton,
  useColorMode,
  useColorModeValue,
  Image,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  Avatar,
  Text,
} from "@chakra-ui/react";
import { MoonIcon, SunIcon, HamburgerIcon } from "@chakra-ui/icons";
import { useRouter } from "next/router";
import AINotifications from "../AINotifications";
import { logoutUser } from "../../redux/auth/authActions";

const AuthNavbar = ({ onToggleSidebar }) => {
  const router = useRouter();
  const dispatch = useDispatch();
  const { colorMode, toggleColorMode } = useColorMode();
  const { user } = useSelector(state => state.auth);
  const bg = useColorModeValue('white', '#002060');

  const handleLogout = async () => {
    await dispatch(logoutUser());
  };

  return (
    <Box bg={bg} px={4} boxShadow="md">
      <Flex h={16} alignItems="center" justifyContent="space-between">
        <Flex alignItems="center">
          <IconButton
            icon={<HamburgerIcon />}
            variant="ghost"
            onClick={onToggleSidebar}
            aria-label="Toggle Sidebar"
            mr={4}
          />
          <Box cursor="pointer" onClick={() => router.push('/dashboard')}>
            <Image src="/images/logo.png" alt="GymWise Logo" maxWidth="130px" />
          </Box>
        </Flex>
        <Flex alignItems="center">
          {user?.institution && (
            <Text mr={4} fontWeight="medium" color={useColorModeValue("gray.600", "gray.300")}>
              {user.institution.name}
            </Text>
          )}
          <AINotifications />
          <IconButton
            size="md"
            icon={colorMode === 'light' ? <MoonIcon /> : <SunIcon />}
            aria-label="Toggle Color Mode"
            onClick={toggleColorMode}
            mr={4}
          />
          <Menu>
            <MenuButton as={Avatar} size="sm" src={user?.avatarUrl} cursor="pointer" />
            <MenuList>
              <MenuItem onClick={() => router.push('/profile')}>Profile</MenuItem>
              <MenuItem onClick={() => router.push('/settings')}>Settings</MenuItem>
              <MenuItem onClick={handleLogout}>Logout</MenuItem>
            </MenuList>
          </Menu>
        </Flex>
      </Flex>
    </Box>
  );
};

export default AuthNavbar;

================
File: src\components\layout\Footer.js
================
import React from "react";
import {
  Box,
  Container,
  SimpleGrid,
  Text,
  Link,
  HStack,
  VStack,
  Icon,
  Divider,
  useColorModeValue,
} from "@chakra-ui/react";
import { FaFacebook, FaTwitter, FaInstagram, FaLinkedin } from "react-icons/fa";
import { motion } from "framer-motion";

const MotionBox = motion(Box);

const Footer = () => {
  const bgColor = useColorModeValue("gray.800", "gray.900");
  const textColor = useColorModeValue("gray.100", "gray.200");
  const linkColor = useColorModeValue("teal.200", "teal.300");

  return (
    <MotionBox
      as="footer"
      bg={bgColor}
      color={textColor}
      py={10}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Container maxW="container.xl">
        <SimpleGrid columns={{ base: 1, md: 4 }} spacing={8}>
          <VStack align="start" spacing={3}>
            <Text fontSize="2xl" fontWeight="bold" bgGradient="linear(to-r, cyan.400, blue.500, purple.600)" bgClip="text">
              GymWise
            </Text>
            <Text fontSize="sm">Insight-Driven Success</Text>
          </VStack>

          <VStack align="start" spacing={3}>
            <Text fontSize="lg" fontWeight="semibold" mb={2}>Quick Links</Text>
            {["About Us", "Contact Us", "Book a Demo"].map((item) => (
              <Link
                key={item}
                href={`/${item.toLowerCase().replace(' ', '-')}`}
                color={linkColor}
                _hover={{ color: "white", textDecoration: "none" }}
                transition="color 0.2s"
              >
                {item}
              </Link>
            ))}
          </VStack>

          <VStack align="start" spacing={3}>
            <Text fontSize="lg" fontWeight="semibold" mb={2}>Contact Us</Text>
            <Text fontSize="sm">Riyadh, Saudi Arabia</Text>
            <Text fontSize="sm">Email: contact@gymwise.com</Text>
            <Text fontSize="sm">Phone: +966 502556166</Text>
          </VStack>

          <VStack align="start" spacing={3}>
            <Text fontSize="lg" fontWeight="semibold" mb={2}>Follow Us</Text>
            <HStack spacing={4}>
              {[FaFacebook, FaTwitter, FaInstagram, FaLinkedin].map((SocialIcon, index) => (
                <MotionBox
                  key={index}
                  whileHover={{ scale: 1.2 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <Link href="#" isExternal>
                    <Icon
                      as={SocialIcon}
                      w={6}
                      h={6}
                      color={linkColor}
                      _hover={{ color: "white" }}
                      transition="color 0.2s"
                    />
                  </Link>
                </MotionBox>
              ))}
            </HStack>
          </VStack>
        </SimpleGrid>

        <Divider my={8} borderColor="gray.600" />

        <HStack justify="space-between" flexWrap="wrap">
          <Text fontSize="sm">&copy; {new Date().getFullYear()} GymWise. All rights reserved.</Text>

        </HStack>
      </Container>
    </MotionBox>
  );
};

export default Footer;

================
File: src\components\layout\LangSwitcher.jsx
================
import { Button } from "@chakra-ui/react";
import { useRouter } from "next/router";
import React from "react";

const LangSwitcher = () => {
  const { locale, push, reload, pathname, query, asPath } = useRouter()
  const nextLocale = locale === 'en' ? 'ar' : 'en'

  const handleClick = async () => {
    await push({ pathname, query }, asPath, { locale: nextLocale });
    reload();
  };

  return (
    <Button
      mx={2}
      size={{ base: "sm", md: "md" }}
      colorScheme="cyan"
      onClick={handleClick}
    >
      {nextLocale.toString().toUpperCase()}
    </Button>
  );
};

export default LangSwitcher;

================
File: src\components\layout\Layout.js
================
import React, { useState, useEffect } from 'react';
import { Box, useDisclosure } from "@chakra-ui/react";
import { useSelector } from 'react-redux';
import { useRouter } from 'next/router';
import AuthNavbar from "./AuthNavbar";
import Sidebar from "./Sidebar";
import Footer from "./Footer";
import PublicNavbar from "./PublicNavbar";
import LoadingSpinner from "./LoadingSpinner";

const publicRoutes = [
  '/',
  '/login',
  '/register',
  '/forgot-password',
  '/reset-password',
  '/reset-password/[uid]/[token]',
  '/activate/[uid]/[token]',
  '/about-us',
  '/contact-us',
  '/book-demo',
  '/registration-success',
  '/features',
  '/blog'
];

const Layout = ({ children }) => {
  const { user, loading, loggingOut, loggingIn } = useSelector(state => state.auth);
  const router = useRouter();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isRouteLoading, setIsRouteLoading] = useState(false);

  const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);

  useEffect(() => {
    const handleRouteChangeStart = () => setIsRouteLoading(true);
    const handleRouteChangeComplete = () => setIsRouteLoading(false);

    router.events.on('routeChangeStart', handleRouteChangeStart);
    router.events.on('routeChangeComplete', handleRouteChangeComplete);
    router.events.on('routeChangeError', handleRouteChangeComplete);

    return () => {
      router.events.off('routeChangeStart', handleRouteChangeStart);
      router.events.off('routeChangeComplete', handleRouteChangeComplete);
      router.events.off('routeChangeError', handleRouteChangeComplete);
    };
  }, [router]);

  useEffect(() => {
    if (!loading && !loggingOut && !loggingIn) {
      if (!user && !publicRoutes.includes(router.pathname) && !router.pathname.startsWith('/reset-password/') && !router.pathname.startsWith('/activate/')) {
        router.push('/login');
      }
    }
  }, [user, loading, loggingOut, loggingIn, router]);

  if (loading || loggingOut || isRouteLoading || loggingIn) {
    return <LoadingSpinner />;
  }

  const isPublicRoute = publicRoutes.includes(router.pathname) || router.pathname.startsWith('/reset-password/') ||
  router.pathname.startsWith('/activate/');

  if (!user && !isPublicRoute) {
    return null; // Prevent rendering of protected routes content
  }

  return (
    <Box minHeight="100vh" display="flex" flexDirection="column">
      {user && !isPublicRoute ? (
        <>
          <AuthNavbar onToggleSidebar={toggleSidebar} />
          <Sidebar isOpen={isSidebarOpen} onClose={toggleSidebar} />
          <Box ml={{ base: 0, md: 64 }} flex="1" mt="4rem">
            {children}
          </Box>
        </>
      ) : (
        <>
          <PublicNavbar />
          <Box flex="1">{children}</Box>
        </>
      )}
      <Footer />
    </Box>
  );
};

export default Layout;

================
File: src\components\layout\LoadingSpinner.js
================
import React from 'react';
import { Flex, Spinner } from '@chakra-ui/react';

const LoadingSpinner = () => {
  return (
    <Flex 
      position="fixed"
      top="0"
      left="0"
      right="0"
      bottom="0"
      backgroundColor="rgba(0, 0, 0, 0.5)"
      justifyContent="center"
      alignItems="center"
      zIndex="9999"
    >
      <Spinner
        thickness="4px"
        speed="0.65s"
        emptyColor="gray.200"
        color="blue.500"
        size="xl"
      />
    </Flex>
  );
};

export default LoadingSpinner;

================
File: src\components\layout\Navbar.js
================
import React from "react";
import {
  Box,
  Flex,
  Link,
  Button,
  useColorMode,
  useColorModeValue,
  HStack,
  IconButton,
  Image,
  VStack,
  Drawer,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
  useDisclosure,
} from "@chakra-ui/react";
import { MoonIcon, SunIcon, HamburgerIcon, CloseIcon } from "@chakra-ui/icons";
import { useRouter } from "next/router";
import { useAuth } from "../../context/AuthContext";

const Navbar = () => {
  const router = useRouter();
  const { colorMode, toggleColorMode } = useColorMode();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const { user, logout } = useAuth();
  const bg = useColorModeValue('white', '#002060');
  const color = useColorModeValue('#002060', 'white');

  const NavLink = ({ children, href }) => (
    <Link
      px={2}
      py={1}
      rounded={'md'}
      _hover={{ textDecoration: 'none', bg: useColorModeValue('#e0f7fa', '#003049'), color: '#002060' }}
      onClick={() => { router.push(href); onClose(); }}
    >
      {children}
    </Link>
  );

  const handleLogout = async () => {
    await logout();
    // The redirection is now handled within the logout function in AuthContext
  };

  const NavLinks = () => (
    <>
      <NavLink href="/">Home</NavLink>
      <NavLink href="/about-us">About Us</NavLink>
      <NavLink href="/contact-us">Contact Us</NavLink>
      <NavLink href="/book-demo">Book a Demo</NavLink>
      <NavLink href="/blog">Blog</NavLink>
      {user ? (
        <>
          <Button
            px={2}
            py={1}
            rounded={'md'}
            colorScheme="teal"
            onClick={handleLogout}
          >
            Logout
          </Button>
          <NavLink href="/dashboard">Dashboard</NavLink>
          {(user.role === 'superadmin' || user.role === 'admin') && (
            <NavLink href="/admin/panel">Admin Panel</NavLink>
          )}
        </>
      ) : (
        <>
          <NavLink href="/login">Login</NavLink>
          <NavLink href="/register">Register</NavLink>
        </>
      )}
    </>
  );

  return (
    <Box bg={bg} px={4} boxShadow="md">
      <Flex h={16} alignItems="center" justifyContent="space-between">
        <HStack spacing={8} alignItems="center">
          <Box cursor="pointer" onClick={() => router.push('/')}>
            <Image src="/images/logo.png" alt="GymWise Logo" maxWidth="130px" />
          </Box>
          <HStack as={'nav'} spacing={4} display={{ base: 'none', md: 'flex' }} color={color}>
            <NavLinks />
          </HStack>
        </HStack>
        <Flex alignItems="center">
          <IconButton 
            size="md" 
            icon={colorMode === 'light' ? <MoonIcon /> : <SunIcon />} 
            aria-label="Toggle Color Mode" 
            onClick={toggleColorMode} 
            mr={4} 
          />
          <IconButton
            size="md"
            icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}
            aria-label="Open Menu"
            display={{ md: 'none' }}
            onClick={isOpen ? onClose : onOpen}
          />
        </Flex>
      </Flex>

      {isOpen ? (
        <Box pb={4} display={{ md: 'none' }}>
          <VStack as={'nav'} spacing={4}>
            <NavLinks />
          </VStack>
        </Box>
      ) : null}
    </Box>
  );
};

export default Navbar;

================
File: src\components\layout\PublicNavbar.js
================
// src/components/layout/PublicNavbar.js

import React from "react";
import {
  Box,
  Flex,
  Link,
  Button,
  useColorMode,
  useColorModeValue,
  HStack,
  IconButton,
  Image,
  VStack,
  Drawer,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
  useDisclosure,
  Spacer,
  Container,
} from "@chakra-ui/react";
import { MoonIcon, SunIcon, HamburgerIcon, CloseIcon } from "@chakra-ui/icons";
import { useRouter } from "next/router";

const PublicNavbar = () => {
  const router = useRouter();
  const { colorMode, toggleColorMode } = useColorMode();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const bg = useColorModeValue('white', 'gray.800');
  const color = useColorModeValue('gray.800', 'white');

  const NavLink = ({ children, href }) => (
    <Link
      px={3}
      py={2}
      rounded={'md'}
      color={color}
      fontWeight="medium"
      _hover={{ textDecoration: 'none', bg: useColorModeValue('gray.100', 'gray.700') }}
      onClick={() => { router.push(href); onClose(); }}
    >
      {children}
    </Link>
  );

  const MainNavLinks = () => (
    <>
      <NavLink href="/">Home</NavLink>
      <NavLink href="/about-us">About Us</NavLink>
      <NavLink href="/contact-us">Contact Us</NavLink>
    </>
  );

  const AuthNavLinks = () => (
    <>
      <Button
        variant="outline"
        colorScheme="brand"
        size="sm"
        onClick={() => router.push('/login')}
      >
        Login
      </Button>
      <Button
        variant="outline"
        colorScheme="brand"
        size="sm"
        onClick={() => router.push('/register')}
      >
        Register
      </Button>
    </>
  );

  return (
    <Box bg={bg} boxShadow="sm">
      <Container maxW="container.xl">
        <Flex h={16} alignItems="center" justifyContent="space-between">
          <HStack spacing={8} alignItems="center">
            <Box cursor="pointer" onClick={() => router.push('/')}>
              <Image src="/images/logo.png" alt="GymWise Logo" maxWidth="130px" />
            </Box>
            <HStack as={'nav'} spacing={4} display={{ base: 'none', md: 'flex' }}>
              <MainNavLinks />
            </HStack>
          </HStack>
          <Spacer />
          <HStack spacing={4} display={{ base: 'none', md: 'flex' }}>
            <AuthNavLinks />
            <IconButton
              size="md"
              icon={colorMode === 'light' ? <MoonIcon /> : <SunIcon />}
              aria-label="Toggle Color Mode"
              onClick={toggleColorMode}
              variant="ghost"
              colorScheme="brand"
            />
          </HStack>
          <IconButton
            size="md"
            icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}
            aria-label="Open Menu"
            display={{ md: 'none' }}
            onClick={isOpen ? onClose : onOpen}
            variant="ghost"
            colorScheme="brand"
          />
        </Flex>
      </Container>

      <Drawer isOpen={isOpen} placement="right" onClose={onClose}>
        <DrawerOverlay />
        <DrawerContent>
          <DrawerCloseButton />
          <VStack spacing={4} mt={16} p={4}>
            <MainNavLinks />
            <AuthNavLinks />
          </VStack>
        </DrawerContent>
      </Drawer>
    </Box>
  );
};

export default PublicNavbar;

================
File: src\components\layout\Sidebar.js
================
import React from "react";
import { useSelector } from 'react-redux';
import {
  Box,
  VStack,
  Link,
  useColorModeValue,
  Drawer,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
  DrawerHeader,
  DrawerBody,
  Icon,
  Text,
  Flex,
  useBreakpointValue,
} from "@chakra-ui/react";
import { useRouter } from "next/router";
import { FaHome, FaChartLine, FaUsers, FaCog, FaBullhorn, FaFileAlt, FaDatabase } from "react-icons/fa";

const Sidebar = ({ isOpen, onClose }) => {
  const router = useRouter();
  const { user } = useSelector(state => state.auth);
  const bg = useColorModeValue('white', 'gray.800');
  const color = useColorModeValue('gray.800', 'white');
  const hoverBg = useColorModeValue('gray.100', 'gray.700');
  
  const isMobile = useBreakpointValue({ base: true, md: false });

  const NavLink = ({ icon, children, href }) => {
    const isActive = router.pathname === href;

    const handleClick = (e) => {
      e.preventDefault();
      if (!isActive) {
        router.push(href);
      }
      if (isMobile) {
        onClose();
      }
    };

    return (
      <Link
        href={href}
        style={{ textDecoration: 'none' }}
        _focus={{ boxShadow: 'none' }}
        onClick={handleClick}
      >
        <Flex
          align="center"
          p="4"
          mx="4"
          borderRadius="lg"
          role="group"
          cursor="pointer"
          bg={isActive ? hoverBg : 'transparent'}
          color={isActive ? 'brand.500' : color}
          _hover={{
            bg: hoverBg,
            color: 'brand.500',
          }}
        >
          {icon && (
            <Icon
              mr="4"
              fontSize="16"
              _groupHover={{
                color: 'brand.500',
              }}
              as={icon}
            />
          )}
          {children}
        </Flex>
      </Link>
    );
  };

  const SidebarContent = (
    <VStack align="stretch" spacing={1}>
      <NavLink icon={FaHome} href="/dashboard">Dashboard & Revenue</NavLink>
      <NavLink icon={FaUsers} href="/member-insights">Member Insights & Retention</NavLink>
      <NavLink icon={FaBullhorn} href="/engagement">Engagement Orchestrator</NavLink>
      <NavLink icon={FaFileAlt} href="/reports">Reports & Analytics</NavLink>
      <NavLink icon={FaDatabase} href="/data-management">Data Management</NavLink>
      {(user?.role === 'superadmin' || user?.role === 'admin') && (
        <NavLink icon={FaCog} href="/admin/panel">Admin Panel</NavLink>
      )}
    </VStack>
  );

  return (
    <>
      {/* Desktop sidebar */}
      <Box
        display={{ base: "none", md: "block" }}
        w="240px"
        bg={bg}
        color={color}
        borderRight="1px"
        borderRightColor={useColorModeValue('gray.200', 'gray.700')}
        pos="fixed"
        h="full"
        pt="20"
      >
        <VStack align="stretch" spacing={5}>
          <Text fontSize="2xl" fontWeight="bold" textAlign="center" color="brand.500">GymWise</Text>
          {SidebarContent}
        </VStack>
      </Box>

      {/* Mobile sidebar */}
      {isMobile && (
        <Drawer isOpen={isOpen} placement="left" onClose={onClose}>
          <DrawerOverlay>
            <DrawerContent bg={bg} color={color}>
              <DrawerCloseButton />
              <DrawerHeader borderBottomWidth="1px">
                <Text fontSize="2xl" fontWeight="bold" color="brand.500">GymWise</Text>
              </DrawerHeader>
              <DrawerBody>
                {SidebarContent}
              </DrawerBody>
            </DrawerContent>
          </DrawerOverlay>
        </Drawer>
      )}
    </>
  );
};

export default Sidebar;

================
File: src\components\layout\test.js
================
import Head from 'next/head';
import Image from 'next/image';
import styles from './layout.module.css';
import utilStyles from '../styles/utils.module.css';
import Link from 'next/link';

const name = 'Zakurove';
export const siteTitle = 'Starter Website';

export default function Layout({ children, home }) {
  return (
    <div className={styles.container}>
      <Head>
        <link rel="icon" href="/favicon.ico" />
        <meta
          name="description"
          content="Learn how to build a personal website using Next.js"
        />
        <meta
          property="og:image"
          content={`https://og-image.vercel.app/${encodeURI(
            siteTitle,
          )}.png?theme=light&md=0&fontSize=75px&images=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg`}
        />
        <meta name="og:title" content={siteTitle} />
        <meta name="twitter:card" content="summary_large_image" />
      </Head>
      <header className={styles.header}>
        {home ? (
          <>
            <Image
              priority
              src="/images/The Garage.jpg"
              className={utilStyles.borderCircle}
              height={144}
              width={144}
              alt=""
            />
            <h1 className={utilStyles.heading2Xl}>{name}</h1>
          </>
        ) : (
          <>
            <Link href="/">
              <Image
                priority
                src="/images/profile.jpg"
                className={utilStyles.borderCircle}
                height={108}
                width={108}
                alt=""
              />
            </Link>
            <h2 className={utilStyles.headingLg}>
              <Link href="/" className={utilStyles.colorInherit}>
                {name}
              </Link>
            </h2>
          </>
        )}
      </header>
      <main>{children}</main>
      {!home && (
        <div className={styles.backToHome}>
          <Link href="/">← Back to home</Link>
        </div>
      )}
    </div>
  );
}

================
File: src\components\layout\test.module.css
================
.container {
    max-width: 36rem;
    padding: 0 1rem;
    margin: 3rem auto 6rem;
  }
  
  .header {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .backToHome {
    margin: 3rem 0 0;
  }

================
File: src\components\memberInsights\MemberDistributionChart.js
================
// src/components/memberInsights/MemberDistributionChart.js

import React, { useState } from 'react';
import { Box, Heading, Text, Flex, Button, SimpleGrid, useColorModeValue, Icon, VStack, HStack, Badge } from '@chakra-ui/react';
import { PieChart, Pie, Cell, ResponsiveContainer, Sector } from 'recharts';
import { FiInfo, FiAlertCircle, FiUserCheck, FiUserX } from 'react-icons/fi';

const MemberDistributionChart = () => {
  const [activeIndex, setActiveIndex] = useState(0);
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');
  const textColor = useColorModeValue('gray.600', 'gray.300');

  const data = [
    { name: 'Thriving', value: 1500, color: '#48BB78', icon: FiUserCheck, description: 'No action needed' },
    { name: 'At Risk', value: 500, color: '#ECC94B', icon: FiAlertCircle, description: 'Consider outreach' },
    { name: 'Likely to Churn', value: 300, color: '#F56565', icon: FiUserX, description: 'Urgent intervention' },
  ];

  const totalMembers = data.reduce((sum, item) => sum + item.value, 0);

  const onPieEnter = (_, index) => {
    setActiveIndex(index);
  };

  const renderActiveShape = (props) => {
    const RADIAN = Math.PI / 180;
    const { cx, cy, midAngle, innerRadius, outerRadius, startAngle, endAngle, fill, payload, percent, value } = props;
    const sin = Math.sin(-RADIAN * midAngle);
    const cos = Math.cos(-RADIAN * midAngle);
    const sx = cx + (outerRadius + 10) * cos;
    const sy = cy + (outerRadius + 10) * sin;
    const mx = cx + (outerRadius + 30) * cos;
    const my = cy + (outerRadius + 30) * sin;
    const ex = mx + (cos >= 0 ? 1 : -1) * 22;
    const ey = my;
    const textAnchor = cos >= 0 ? 'start' : 'end';

    return (
      <g>
        <text x={cx} y={cy} dy={8} textAnchor="middle" fill={fill}>
          {payload.name}
        </text>
        <Sector
          cx={cx}
          cy={cy}
          innerRadius={innerRadius}
          outerRadius={outerRadius}
          startAngle={startAngle}
          endAngle={endAngle}
          fill={fill}
        />
        <Sector
          cx={cx}
          cy={cy}
          startAngle={startAngle}
          endAngle={endAngle}
          innerRadius={outerRadius + 6}
          outerRadius={outerRadius + 10}
          fill={fill}
        />
        <path d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`} stroke={fill} fill="none" />
        <circle cx={ex} cy={ey} r={2} fill={fill} stroke="none" />
        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} textAnchor={textAnchor} fill="#333">{`${value} members`}</text>
        <text x={ex + (cos >= 0 ? 1 : -1) * 12} y={ey} dy={18} textAnchor={textAnchor} fill="#999">
          {`(${(percent * 100).toFixed(2)}%)`}
        </text>
      </g>
    );
  };

  return (
    <Box bg={bgColor} p={8}  boxShadow="2xl">
      <Flex justifyContent="space-between" alignItems="center" mb={6}>
        <Heading size="lg" color="brand.500">AI-Powered Member Distribution</Heading>
        <Icon as={FiInfo} w={6} h={6} color="brand.500" cursor="pointer" />
      </Flex>
      <Text fontSize="md" fontWeight="medium" mb={6}>
        Our advanced AI model categorizes members based on their engagement levels and likelihood to churn.
      </Text>
      <Flex direction={{ base: "column", md: "row" }} align="center">
        <Box flex={1} height="300px">
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                activeIndex={activeIndex}
                activeShape={renderActiveShape}
                data={data}
                cx="50%"
                cy="50%"
                innerRadius={60}
                outerRadius={80}
                fill="#8884d8"
                dataKey="value"
                onMouseEnter={onPieEnter}
              >
                {data.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
            </PieChart>
          </ResponsiveContainer>
        </Box>
        <VStack flex={1} align="stretch" spacing={4}>
          {data.map((item, index) => (
            <HStack key={index} p={3} bg={`${item.color}20`} borderRadius="md">
              <Icon as={item.icon} w={6} h={6} color={item.color} />
              <Box>
                <Text fontWeight="bold" color={item.color}>
                  {item.value} {item.name}
                </Text>
                <Text fontSize="sm" color={textColor}>
                  {item.description}
                </Text>
              </Box>
              <Badge colorScheme={item.color.replace('#', '')} ml="auto">
                {((item.value / totalMembers) * 100).toFixed(1)}%
              </Badge>
            </HStack>
          ))}
        </VStack>
      </Flex>
      <Button colorScheme="brand" size="lg" mt={6} width="full">
        View Detailed AI Insights
      </Button>
    </Box>
  );
};

export default MemberDistributionChart;

================
File: src\components\memberInsights\MemberSegmentBreakdown.js
================
// src/components/memberInsights/MemberSegmentBreakdown.js

import React from 'react';
import { Box, Heading, Table, Thead, Tbody, Tr, Th, Td, useColorModeValue, Flex, Text, Progress, Icon } from '@chakra-ui/react';
import { FiTrendingUp, FiTrendingDown, FiMinusCircle } from 'react-icons/fi';

const MemberSegmentBreakdown = () => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');
  const headerBgColor = useColorModeValue('gray.50', 'gray.600');

  const segments = [
    { name: 'Thriving', count: 600, avgVisits: 12, retentionRate: 95, color: '#48BB78', icon: FiTrendingUp },
    { name: 'Fluctuating', count: 300, avgVisits: 8, retentionRate: 75, color: '#ECC94B', icon: FiMinusCircle },
    { name: 'Declining', count: 100, avgVisits: 3, retentionRate: 40, color: '#F56565', icon: FiTrendingDown },
  ];

  return (
    <Box bg={bgColor} p={6} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="2xl">
      <Heading size="lg" mb={6} color="brand.500">Member Segment Breakdown</Heading>
      <Box overflowX="auto">
        <Table variant="simple">
          <Thead>
            <Tr bg={headerBgColor}>
              <Th>Segment</Th>
              <Th isNumeric>Count</Th>
              <Th isNumeric>Avg. Visits/Month</Th>
              <Th>Retention Rate</Th>
            </Tr>
          </Thead>
          <Tbody>
            {segments.map((segment) => (
              <Tr key={segment.name}>
                <Td>
                  <Flex align="center">
                    <Icon as={segment.icon} color={segment.color} mr={2} />
                    <Text fontWeight="bold" color={segment.color}>{segment.name}</Text>
                  </Flex>
                </Td>
                <Td isNumeric fontWeight="bold">{segment.count}</Td>
                <Td isNumeric>{segment.avgVisits}</Td>
                <Td>
                  <Flex align="center">
                    <Box w="70%" mr={4}>
                      <Progress value={segment.retentionRate} colorScheme={segment.color.replace('#', '')} size="sm" borderRadius="full" />
                    </Box>
                    <Text fontWeight="bold">{segment.retentionRate}%</Text>
                  </Flex>
                </Td>
              </Tr>
            ))}
          </Tbody>
        </Table>
      </Box>
    </Box>
  );
};

export default MemberSegmentBreakdown;

================
File: src\components\memberInsights\RetentionAlerts.js
================
// src/components/memberInsights/RetentionAlerts.js

import React from 'react';
import { Box, Heading, VStack, HStack, Text, Icon, Badge, Button, useColorModeValue } from '@chakra-ui/react';
import { FiAlertCircle, FiCheckCircle, FiClock, FiArrowRight } from 'react-icons/fi';

const RetentionAlerts = () => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');

  const alerts = [
    { message: "15 members haven't visited in 30 days", urgent: true, icon: FiAlertCircle, action: "Send Re-engagement Email" },
    { message: '5 "Declining" members showed increased activity this week', urgent: false, icon: FiCheckCircle, action: "Review Improvement" },
    { message: '10 memberships are expiring in the next 7 days', urgent: true, icon: FiClock, action: "Offer Renewal Incentive" },
  ];

  return (
    <Box bg={bgColor} p={6} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="lg" mb={6} color="brand.500" fontWeight="bold">AI-Powered Retention Alerts</Heading>
      <VStack spacing={4} align="stretch">
        {alerts.map((alert, index) => (
          <Box 
            key={index} 
            p={4} 
            borderRadius="lg" 
            borderWidth={1}
            borderColor={alert.urgent ? 'red.300' : 'green.300'}
            bg={alert.urgent ? 'red.50' : 'green.50'}
            _dark={{
              bg: alert.urgent ? 'rgba(254, 178, 178, 0.1)' : 'rgba(154, 230, 180, 0.1)'
            }}
            transition="all 0.3s"
            _hover={{ transform: 'translateY(-2px)', shadow: 'md' }}
          >
            <HStack spacing={4} justify="space-between" align="center">
              <HStack spacing={4}>
                <Icon 
                  as={alert.icon} 
                  color={alert.urgent ? 'red.500' : 'green.500'} 
                  boxSize={6} 
                  bg={alert.urgent ? 'red.100' : 'green.100'} 
                  p={1} 
                  borderRadius="full"
                />
                <VStack align="start" spacing={0}>
                  <Text fontWeight="semibold" fontSize="md">{alert.message}</Text>
                  <Badge 
                    colorScheme={alert.urgent ? 'red' : 'green'} 
                    variant="subtle"
                    fontSize="xs"
                    borderRadius="full"
                    px={2}
                    py={0.5}
                  >
                    {alert.urgent ? 'URGENT' : 'POSITIVE'}
                  </Badge>
                </VStack>
              </HStack>
              <Button 
                rightIcon={<FiArrowRight />} 
                colorScheme={alert.urgent ? 'red' : 'green'} 
                size="sm" 
                fontWeight="medium"
                borderRadius="full"
                px={8}
                _hover={{
                  transform: 'translateX(2px)',
                  boxShadow: 'sm'
                }}
              >
                {alert.action}
              </Button>
            </HStack>
          </Box>
        ))}
      </VStack>
    </Box>
  );
};

export default RetentionAlerts;

================
File: src\components\memberInsights\WhatIfScenario.js
================
import React, { useState } from 'react';
import {
  Box,
  Heading,
  VStack,
  HStack,
  Text,
  Slider,
  SliderTrack,
  SliderFilledTrack,
  SliderThumb,
  Button,
  useColorModeValue,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatArrow,
  SimpleGrid,
  Tooltip,
  Alert,
  AlertIcon,
} from '@chakra-ui/react';
import { FiInfo } from 'react-icons/fi';
import axios from 'axios';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, ResponsiveContainer } from 'recharts';

const WhatIfScenario = () => {
  const [scenarioParams, setScenarioParams] = useState({
    membership_price_change: 0,
    new_classes: 0,
    gym_hours_change: 0,
    marketing_intensity: 1,
    facility_improvement: 0,
    staff_training: 0,
  });

  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  const handleSliderChange = (name, value) => {
    setScenarioParams(prev => ({ ...prev, [name]: value }));
  };

  const runScenario = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.post('/ai/what-if-scenario/', { scenario_params: scenarioParams });
      setResults(response.data);
    } catch (error) {
      console.error("Error running scenario:", error);
      setError(error.response?.data?.error || "An error occurred while running the scenario");
    } finally {
      setLoading(false);
    }
  };

  const chartData = results ? [
    { name: 'Current', retention: results.current_retention_rate * 100 },
    { name: 'Scenario', retention: results.scenario_retention_rate * 100 },
  ] : [];

  return (
    <Box bg={bgColor} p={6} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="lg" mb={6}>What-If Scenario Analysis</Heading>
      <VStack spacing={6} align="stretch">
        <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
          <ScenarioSlider
            name="membership_price_change"
            label="Membership Price Change"
            value={scenarioParams.membership_price_change}
            onChange={handleSliderChange}
            min={-0.5}
            max={0.5}
            step={0.01}
            tooltip="Adjust membership price (e.g., -0.1 for 10% decrease, 0.1 for 10% increase). This simulates how price changes might affect member retention."
          />
          <ScenarioSlider
            name="new_classes"
            label="New Classes"
            value={scenarioParams.new_classes}
            onChange={handleSliderChange}
            min={0}
            max={10}
            step={1}
            tooltip="Number of new classes to add. This simulates how increasing class variety might impact member engagement and retention."
          />
          <ScenarioSlider
            name="gym_hours_change"
            label="Gym Hours Change"
            value={scenarioParams.gym_hours_change}
            onChange={handleSliderChange}
            min={-4}
            max={4}
            step={1}
            tooltip="Change in gym opening hours per day. This simulates how extended or reduced hours might affect member satisfaction and retention."
          />
          <ScenarioSlider
            name="marketing_intensity"
            label="Marketing Intensity"
            value={scenarioParams.marketing_intensity}
            onChange={handleSliderChange}
            min={0.5}
            max={2}
            step={0.1}
            tooltip="Adjust marketing efforts (1 is current level, 2 is doubling efforts). This simulates how increased marketing might affect new member acquisition and retention."
          />
          <ScenarioSlider
            name="facility_improvement"
            label="Facility Improvement"
            value={scenarioParams.facility_improvement}
            onChange={handleSliderChange}
            min={0}
            max={0.5}
            step={0.01}
            tooltip="Facility improvement score (0.1 is 10% improvement). This simulates how upgrades to gym equipment or amenities might impact member satisfaction and retention."
          />
          <ScenarioSlider
            name="staff_training"
            label="Staff Training"
            value={scenarioParams.staff_training}
            onChange={handleSliderChange}
            min={0}
            max={0.5}
            step={0.01}
            tooltip="Staff training intensity (0.1 is 10% increase in training). This simulates how improved staff knowledge and service might affect member experience and retention."
          />
        </SimpleGrid>
        <Button colorScheme="brand" onClick={runScenario} isLoading={loading}>
          Run Scenario
        </Button>
        {error && (
          <Alert status="error">
            <AlertIcon />
            {error}
          </Alert>
        )}
        {results && (
          <>
            <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}>
              <Stat>
                <StatLabel>Current Retention Rate</StatLabel>
                <StatNumber>{(results.current_retention_rate * 100).toFixed(2)}%</StatNumber>
              </Stat>
              <Stat>
                <StatLabel>Scenario Retention Rate</StatLabel>
                <StatNumber>{(results.scenario_retention_rate * 100).toFixed(2)}%</StatNumber>
              </Stat>
              <Stat>
                <StatLabel>Change in Retention</StatLabel>
                <StatNumber>
                  <StatArrow type={results.retention_rate_change >= 0 ? 'increase' : 'decrease'} />
                  {(Math.abs(results.retention_rate_change) * 100).toFixed(2)}%
                </StatNumber>
                <StatHelpText>
                  {results.retention_rate_change >= 0 ? 'Improvement' : 'Decline'}
                </StatHelpText>
              </Stat>
            </SimpleGrid>
            <Box h="300px" mt={6}>
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={chartData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <RechartsTooltip />
                  <Legend />
                  <Line type="monotone" dataKey="retention" stroke="#8884d8" activeDot={{ r: 8 }} />
                </LineChart>
              </ResponsiveContainer>
            </Box>
          </>
        )}
      </VStack>
    </Box>
  );
};

const ScenarioSlider = ({ name, label, value, onChange, min, max, step, tooltip }) => {
  return (
    <Box>
      <HStack justify="space-between" mb={2}>
        <Text fontWeight="medium">{label}</Text>
        <Tooltip label={tooltip} placement="top" hasArrow>
          <Box as={FiInfo} />
        </Tooltip>
      </HStack>
      <Slider
        value={value}
        onChange={(v) => onChange(name, v)}
        min={min}
        max={max}
        step={step}
      >
        <SliderTrack>
          <SliderFilledTrack />
        </SliderTrack>
        <SliderThumb boxSize={6} />
      </Slider>
      <Text textAlign="right" mt={1}>
        {value.toFixed(2)}
      </Text>
    </Box>
  );
};

export default WhatIfScenario;

================
File: src\components\members\MemberDetailView.js
================
import React, { useState, useEffect } from 'react';
import {
  Box,
  Heading,
  Text,
  VStack,
  HStack,
  Badge,
  Spinner,
  useColorModeValue,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatArrow,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
} from '@chakra-ui/react';
import axios from '../../utils/axiosConfig';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

const MemberDetailView = ({ memberId }) => {
  const [member, setMember] = useState(null);
  const [loading, setLoading] = useState(true);
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  useEffect(() => {
    fetchMemberDetails();
  }, [memberId]);

  const fetchMemberDetails = async () => {
    setLoading(true);
    try {
      const response = await axios.get(`/ai/member-insights/${memberId}/`);
      setMember(response.data);
    } catch (error) {
      console.error('Error fetching member details:', error);
    }
    setLoading(false);
  };

  if (loading) {
    return <Spinner size="xl" />;
  }

  if (!member) {
    return <Text>Member not found</Text>;
  }

  return (
    <Box bg={bgColor} p={6} borderRadius="lg" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <VStack align="stretch" spacing={6}>
        <Heading size="lg">{member.name}</Heading>
        <HStack>
          <Badge colorScheme={member.churn_risk === 'Low' ? 'green' : member.churn_risk === 'Medium' ? 'yellow' : 'red'}>
            {member.churn_risk} Churn Risk
          </Badge>
          <Text>{member.email}</Text>
        </HStack>
        <Tabs variant="enclosed">
          <TabList>
            <Tab>Overview</Tab>
            <Tab>Activity</Tab>
            <Tab>Insights</Tab>
          </TabList>
          <TabPanels>
            <TabPanel>
              <VStack align="stretch" spacing={4}>
                <Stat>
                  <StatLabel>Membership Duration</StatLabel>
                  <StatNumber>{member.membership_duration} months</StatNumber>
                </Stat>
                <Stat>
                  <StatLabel>Visit Frequency</StatLabel>
                  <StatNumber>{member.visit_frequency} visits/week</StatNumber>
                  <StatHelpText>
                    <StatArrow type={member.visit_frequency_change > 0 ? 'increase' : 'decrease'} />
                    {Math.abs(member.visit_frequency_change)}% from last month
                  </StatHelpText>
                </Stat>
                <Stat>
                  <StatLabel>Churn Probability</StatLabel>
                  <StatNumber>{(member.churn_probability * 100).toFixed(2)}%</StatNumber>
                </Stat>
              </VStack>
            </TabPanel>
            <TabPanel>
              <Box height="300px">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={member.activity_data}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" />
                    <YAxis />
                    <Tooltip />
                    <Line type="monotone" dataKey="visits" stroke="#8884d8" />
                  </LineChart>
                </ResponsiveContainer>
              </Box>
            </TabPanel>
            <TabPanel>
              <VStack align="stretch" spacing={4}>
                {member.insights.map((insight, index) => (
                  <Box key={index} p={4} borderWidth={1} borderRadius="md" borderColor={borderColor}>
                    <Text fontWeight="bold">{insight.type}</Text>
                    <Text>{insight.message}</Text>
                  </Box>
                ))}
              </VStack>
            </TabPanel>
          </TabPanels>
        </Tabs>
      </VStack>
    </Box>
  );
};

export default MemberDetailView;

================
File: src\components\members\MemberListView.js
================
import React, { useState, useEffect } from 'react';
import {
  Box,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Heading,
  Button,
  useColorModeValue,
  Spinner,
  Select,
  Flex,
  Input,
  IconButton,
} from '@chakra-ui/react';
import { ChevronLeftIcon, ChevronRightIcon, SearchIcon } from '@chakra-ui/icons';
import axios from '../../utils/axiosConfig';
import { useRouter } from 'next/router';

const MemberListView = () => {
  const [members, setMembers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [sortBy, setSortBy] = useState('name');
  const [sortOrder, setSortOrder] = useState('asc');
  const [searchTerm, setSearchTerm] = useState('');
  const router = useRouter();
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  useEffect(() => {
    fetchMembers();
  }, [page, sortBy, sortOrder, searchTerm]);

  const fetchMembers = async () => {
    setLoading(true);
    try {
      const response = await axios.get('/ai/member-insights/', {
        params: {
          page,
          sort_by: sortBy,
          sort_order: sortOrder,
          search: searchTerm,
        },
      });
      setMembers(response.data.results);
      setTotalPages(Math.ceil(response.data.count / 10)); // Assuming 10 items per page
    } catch (error) {
      console.error('Error fetching members:', error);
    }
    setLoading(false);
  };

  const handleSort = (column) => {
    if (sortBy === column) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(column);
      setSortOrder('asc');
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    setPage(1);
    fetchMembers();
  };

  const handleViewDetails = (memberId) => {
    router.push(`/members/${memberId}`);
  };

  return (
    <Box bg={bgColor} p={6} borderRadius="lg" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="lg" mb={6}>Member List</Heading>
      <Flex mb={4}>
        <form onSubmit={handleSearch} style={{ display: 'flex', width: '100%' }}>
          <Input
            placeholder="Search members..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            mr={2}
          />
          <IconButton
            type="submit"
            aria-label="Search members"
            icon={<SearchIcon />}
            colorScheme="brand"
          />
        </form>
      </Flex>
      {loading ? (
        <Spinner size="xl" />
      ) : (
        <>
          <Table variant="simple">
            <Thead>
              <Tr>
                <Th cursor="pointer" onClick={() => handleSort('name')}>
                  Name {sortBy === 'name' && (sortOrder === 'asc' ? '▲' : '▼')}
                </Th>
                <Th cursor="pointer" onClick={() => handleSort('email')}>
                  Email {sortBy === 'email' && (sortOrder === 'asc' ? '▲' : '▼')}
                </Th>
                <Th cursor="pointer" onClick={() => handleSort('churn_risk')}>
                  Churn Risk {sortBy === 'churn_risk' && (sortOrder === 'asc' ? '▲' : '▼')}
                </Th>
                <Th>Actions</Th>
              </Tr>
            </Thead>
            <Tbody>
              {members.map((member) => (
                <Tr key={member.id}>
                  <Td>{member.name}</Td>
                  <Td>{member.email}</Td>
                  <Td>{member.churn_risk}</Td>
                  <Td>
                    <Button size="sm" onClick={() => handleViewDetails(member.id)}>
                      View Details
                    </Button>
                  </Td>
                </Tr>
              ))}
            </Tbody>
          </Table>
          <Flex justify="space-between" mt={4}>
            <Button
              leftIcon={<ChevronLeftIcon />}
              onClick={() => setPage(page - 1)}
              isDisabled={page === 1}
            >
              Previous
            </Button>
            <Select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              width="auto"
              ml={2}
            >
              <option value="name">Sort by Name</option>
              <option value="email">Sort by Email</option>
              <option value="churn_risk">Sort by Churn Risk</option>
            </Select>
            <Button
              rightIcon={<ChevronRightIcon />}
              onClick={() => setPage(page + 1)}
              isDisabled={page === totalPages}
            >
              Next
            </Button>
          </Flex>
        </>
      )}
    </Box>
  );
};

export default MemberListView;

================
File: src\components\reports\AnalyticsDashboard.js
================
// src/components/reports/AnalyticsDashboard.js

import React from 'react';
import { Box, Heading, SimpleGrid, Stat, StatLabel, StatNumber, StatHelpText, StatArrow, Icon, Flex, useColorModeValue } from '@chakra-ui/react';
import { FiDollarSign, FiUsers, FiPercent, FiStar } from 'react-icons/fi';

const AnalyticsDashboard = () => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');

  const stats = [
    { label: 'Total Revenue', value: '$250,000', change: 8.2, increase: true, icon: FiDollarSign, color: 'green.500' },
    { label: 'Active Members', value: '1,200', change: 4.5, increase: true, icon: FiUsers, color: 'blue.500' },
    { label: 'Avg. Retention Rate', value: '85%', change: 2.3, increase: true, icon: FiPercent, color: 'purple.500' },
    { label: 'Net Promoter Score', value: '72', change: 5.1, increase: true, icon: FiStar, color: 'orange.500' },
  ];

  return (
    <Box bg={bgColor} p={6} borderRadius="lg" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Heading size="md" mb={6}>Analytics Overview</Heading>
      <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
        {stats.map((stat, index) => (
          <Box key={index} p={4} borderRadius="md" borderWidth={1} borderColor={borderColor}>
            <Stat>
              <Flex justifyContent="space-between" alignItems="center" mb={2}>
                <StatLabel>{stat.label}</StatLabel>
                <Icon as={stat.icon} color={stat.color} boxSize={6} />
              </Flex>
              <StatNumber fontSize="2xl" fontWeight="bold" color={stat.color}>{stat.value}</StatNumber>
              <StatHelpText>
                <StatArrow type={stat.increase ? 'increase' : 'decrease'} />
                {stat.change}%
              </StatHelpText>
            </Stat>
          </Box>
        ))}
      </SimpleGrid>
    </Box>
  );
};

export default AnalyticsDashboard;

================
File: src\components\reports\ReportBuilder.js
================
// src/components/reports/ReportBuilder.js

import React from 'react';
import { Box, Heading, VStack, FormControl, FormLabel, Select, Button, Icon, useColorModeValue, SimpleGrid, Checkbox, Text, Flex, Tooltip } from '@chakra-ui/react';
import { FiFileText, FiCalendar, FiDownload, FiPieChart, FiBarChart2, FiTrendingUp, FiInfo } from 'react-icons/fi';

const ReportBuilder = () => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');

  return (
    <Box bg={bgColor} p={8} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="xl">
      <Flex justifyContent="space-between" alignItems="center" mb={6}>
        <Heading size="lg">Custom Report Builder</Heading>
        <Tooltip label="Build your custom report by selecting options below">
          <Icon as={FiInfo} color="brand.500" boxSize={6} cursor="pointer" />
        </Tooltip>
      </Flex>
      <SimpleGrid columns={{ base: 1, md: 2 }} spacing={8}>
        <VStack spacing={6} align="stretch">
          <FormControl>
            <FormLabel fontWeight="bold">Report Type</FormLabel>
            <Select placeholder="Select report type" icon={<Icon as={FiFileText} />} size="lg">
              <option value="membership">Membership Report</option>
              <option value="revenue">Revenue Report</option>
              <option value="engagement">Engagement Report</option>
            </Select>
          </FormControl>
          <FormControl>
            <FormLabel fontWeight="bold">Time Period</FormLabel>
            <Select placeholder="Select time period" icon={<Icon as={FiCalendar} />} size="lg">
              <option value="last7days">Last 7 Days</option>
              <option value="last30days">Last 30 Days</option>
              <option value="lastQuarter">Last Quarter</option>
              <option value="lastYear">Last Year</option>
            </Select>
          </FormControl>
        </VStack>
        <VStack spacing={6} align="stretch">
          <FormControl>
            <FormLabel fontWeight="bold">Include Visualizations</FormLabel>
            <VStack align="start" spacing={3}>
              <Checkbox size="lg" colorScheme="brand"><Icon as={FiPieChart} mr={2} />Pie Charts</Checkbox>
              <Checkbox size="lg" colorScheme="brand"><Icon as={FiBarChart2} mr={2} />Bar Graphs</Checkbox>
              <Checkbox size="lg" colorScheme="brand"><Icon as={FiTrendingUp} mr={2} />Trend Lines</Checkbox>
            </VStack>
          </FormControl>
          <FormControl>
            <FormLabel fontWeight="bold">Data Granularity</FormLabel>
            <Select placeholder="Select granularity" size="lg">
              <option value="daily">Daily</option>
              <option value="weekly">Weekly</option>
              <option value="monthly">Monthly</option>
            </Select>
          </FormControl>
        </VStack>
      </SimpleGrid>
      <Button leftIcon={<FiDownload />} colorScheme="brand" size="lg" width="full" mt={8} height="60px" fontSize="xl">
        Generate Report
      </Button>
    </Box>
  );
};

export default ReportBuilder;

================
File: src\components\reports\ReportList.js
================
// src/components/reports/ReportList.js

import React from 'react';
import { Box, VStack, HStack, Text, Icon, Button, useColorModeValue, Flex, Badge } from '@chakra-ui/react';
import { FiFileText, FiDownload, FiEye, FiTrash2 } from 'react-icons/fi';

const ReportList = () => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.100', 'gray.600');

  const reports = [
    { name: 'Monthly Revenue Report', date: '2023-05-01', type: 'Revenue' },
    { name: 'Q2 Membership Overview', date: '2023-04-15', type: 'Membership' },
    { name: 'Annual Engagement Analysis', date: '2023-01-05', type: 'Engagement' },
  ];

  const getTypeColor = (type) => {
    switch (type) {
      case 'Revenue': return 'green';
      case 'Membership': return 'blue';
      case 'Engagement': return 'purple';
      default: return 'gray';
    }
  };

  return (
    <VStack spacing={4} align="stretch">
      {reports.map((report, index) => (
        <Box key={index} p={6} bg={bgColor} borderRadius="xl" borderWidth={1} borderColor={borderColor} boxShadow="md" transition="all 0.3s" _hover={{ transform: 'translateY(-2px)', boxShadow: 'lg' }}>
          <Flex justify="space-between" align="center">
            <HStack spacing={4}>
              <Icon as={FiFileText} color="brand.500" boxSize={6} />
              <VStack align="start" spacing={1}>
                <Text fontWeight="bold" fontSize="lg">{report.name}</Text>
                <HStack>
                  <Text fontSize="sm" color="gray.500">{report.date}</Text>
                  <Badge colorScheme={getTypeColor(report.type)}>{report.type}</Badge>
                </HStack>
              </VStack>
            </HStack>
            <HStack>
              <Button size="sm" leftIcon={<FiEye />} variant="ghost" colorScheme="brand">View</Button>
              <Button size="sm" leftIcon={<FiDownload />} colorScheme="brand">Download</Button>
              <Button size="sm" leftIcon={<FiTrash2 />} variant="ghost" colorScheme="red">Delete</Button>
            </HStack>
          </Flex>
        </Box>
      ))}
    </VStack>
  );
};

export default ReportList;

================
File: src\context\AuthContext.js
================
import React, { createContext, useContext, useState, useEffect } from "react";
import axios from "../utils/axiosConfig";
import { useToast } from "@chakra-ui/react";
import { useRouter } from 'next/router';
import { useDispatch } from 'react-redux';
import { loginSuccess, logout } from '../redux/auth/authSlice';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [loading, setLoading] = useState(true);
  const toast = useToast();
  const router = useRouter();
  const dispatch = useDispatch();

  useEffect(() => {
    const loadUser = async () => {
      const token = localStorage.getItem("token") || sessionStorage.getItem("token");
      if (token) {
        try {
          const response = await axios.get('/api/user/');
          dispatch(loginSuccess({ user: response.data, token }));
          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
        } catch (error) {
          console.error("Error loading user:", error);
          await logoutUser();
        }
      }
      setLoading(false);
    };

    loadUser();
  }, [dispatch]);

  const login = async (email, password, rememberMe) => {
    try {
      const response = await axios.post('/api/token/', { email, password });
      const { access, refresh, user } = response.data;
      
      if (rememberMe) {
        localStorage.setItem("token", access);
        localStorage.setItem("refreshToken", refresh);
      } else {
        sessionStorage.setItem("token", access);
        sessionStorage.setItem("refreshToken", refresh);
      }
      
      dispatch(loginSuccess({ user, token: access }));
      axios.defaults.headers.common['Authorization'] = `Bearer ${access}`;
  
      router.push('/dashboard');
  
      return user;
    } catch (error) {
      console.error("Login failed", error.response ? error.response.data : error.message);
      throw error;
    }
  };

  const logoutUser = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("refreshToken");
    sessionStorage.removeItem("token");
    sessionStorage.removeItem("refreshToken");
    dispatch(logout());
    delete axios.defaults.headers.common['Authorization'];
    router.push('/login');
  };

  const refreshToken = async () => {
    const refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
    if (refreshToken) {
      try {
        const response = await axios.post('/api/token/refresh/', {
          refresh: refreshToken
        });
        const { access } = response.data;
        if (localStorage.getItem("token")) {
          localStorage.setItem("token", access);
        } else {
          sessionStorage.setItem("token", access);
        }
        axios.defaults.headers.common['Authorization'] = `Bearer ${access}`;
        return access;
      } catch (error) {
        console.error("Error refreshing token:", error);
        await logoutUser();
        throw error;
      }
    }
    return null;
  };

  // Axios interceptor for token refresh
  axios.interceptors.response.use(
    (response) => response,
    async (error) => {
      const originalRequest = error.config;
      if (error.response.status === 401 && !originalRequest._retry) {
        originalRequest._retry = true;
        try {
          const newToken = await refreshToken();
          if (newToken) {
            originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
            return axios(originalRequest);
          }
        } catch (refreshError) {
          return Promise.reject(refreshError);
        }
      }
      return Promise.reject(error);
    }
  );

  return (
    <AuthContext.Provider 
      value={{ 
        login, 
        logoutUser, 
        loading, 
        refreshToken,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

================
File: src\hooks\useAuthCheck.js
================
// src/hooks/useAuthCheck.js
import { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';

export const useAuthCheck = () => {
  const { user, loading } = useSelector(state => state.auth);
  const [isAuthorized, setIsAuthorized] = useState(false);
  const [authChecked, setAuthChecked] = useState(false);

  useEffect(() => {
    if (!loading) {
      setIsAuthorized(user && (user.role === 'admin' || user.role === 'superadmin'));
      setAuthChecked(true);
    }
  }, [user, loading]);

  return { isAuthorized, authChecked, user, loading };
};

================
File: src\pages\about-us.js
================
import { Box, Container, Heading, Text, Stack, VStack, Image, SimpleGrid, useColorModeValue, Icon, Flex, Button, Divider } from "@chakra-ui/react";
import { FaRocket, FaEye, FaUsers, FaLightbulb, FaHandshake, FaTrophy } from "react-icons/fa";
import { useRouter } from "next/router";

const values = [
  { title: "Innovation", icon: FaLightbulb, description: "We constantly push boundaries to deliver cutting-edge solutions." },
  { title: "Integrity", icon: FaHandshake, description: "We build trust through transparent and ethical practices." },
  { title: "Excellence", icon: FaTrophy, description: "We strive for the highest quality in everything we do." },
  { title: "Customer Success", icon: FaUsers, description: "Your success is our success. We're dedicated to your growth." },
];

export default function AboutUs() {
  const bgColor = useColorModeValue("gray.50", "gray.900");
  const cardBg = useColorModeValue("white", "gray.800");
  const accentColor = useColorModeValue("brand.500", "brand.300");
  const router = useRouter();

  return (
    <Box bg={bgColor}>
      <Container maxW="container.xl" py={20}>
        <VStack spacing={20} align="stretch">
          <VStack spacing={8} textAlign="center">
            <Heading as="h1" size="3xl" fontWeight="bold">
              Transforming the{" "}
              <Text as="span" color={accentColor}>
                Fitness Industry
              </Text>
            </Heading>
            <Text fontSize="xl" maxW="3xl" mx="auto" color={useColorModeValue("gray.600", "gray.300")}>
              At GymWise, we're on a mission to revolutionize how gyms engage with their members. Through innovative technology and data-driven insights, we empower fitness businesses to thrive in an ever-evolving industry.
            </Text>
          </VStack>

          <Stack direction={{ base: "column", lg: "row" }} spacing={16} align="center">
            <Box 
              flex={1} 
              position="relative" 
              height="400px" 
              width="100%" 
              overflow="hidden" 
              rounded="2xl" 
              shadow="2xl"
            >
              <Image 
                src="/images/code.jpg" 
                alt="GymWise Team" 
                layout="fill" 
                objectFit="cover" 
                objectPosition="center"
              />
            </Box>
            <VStack align="start" spacing={8} flex={1}>
              <Heading as="h2" size="2xl" color={accentColor}>
                Our Story
              </Heading>
              <Text fontSize="lg" color={useColorModeValue("gray.600", "gray.300")}>
                Founded in 2024, GymWise was born from a simple observation: gyms were struggling to retain members and maximize their potential. Our founders, with backgrounds in digital transformation, fitness and technology, saw an opportunity to bridge this gap.
              </Text>
              <Text fontSize="lg" color={useColorModeValue("gray.600", "gray.300")}>
                Today, GymWise is at the forefront of the fitness technology revolution, serving hundreds of gyms worldwide and continually innovating to meet the evolving needs of the industry.
              </Text>
            </VStack>
          </Stack>

          <VStack spacing={12}>
            <Heading as="h2" size="2xl" textAlign="center">
              Our Mission and Vision
            </Heading>
            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={10} w="full">
              <Box bg={cardBg} p={10} rounded="xl" shadow="xl">
                <VStack align="start" spacing={6}>
                  <Flex align="center" justify="center" w={20} h={20} rounded="full" bg={useColorModeValue("brand.100", "brand.900")}>
                    <Icon as={FaRocket} w={10} h={10} color={accentColor} />
                  </Flex>
                  <Heading as="h3" size="xl">Our Mission</Heading>
                  <Divider borderColor={useColorModeValue("gray.200", "gray.700")} />
                  <Text fontSize="lg" color={useColorModeValue("gray.600", "gray.300")}>
                    To empower gyms with innovative solutions that drive member retention, satisfaction, and business growth.
                  </Text>
                </VStack>
              </Box>
              <Box bg={cardBg} p={10} rounded="xl" shadow="xl">
                <VStack align="start" spacing={6}>
                  <Flex align="center" justify="center" w={20} h={20} rounded="full" bg={useColorModeValue("brand.100", "brand.900")}>
                    <Icon as={FaEye} w={10} h={10} color={accentColor} />
                  </Flex>
                  <Heading as="h3" size="xl">Our Vision</Heading>
                  <Divider borderColor={useColorModeValue("gray.200", "gray.700")} />
                  <Text fontSize="lg" color={useColorModeValue("gray.600", "gray.300")}>
                    To be the global leader in gym management solutions, setting the standard for member engagement and retention in the fitness industry.
                  </Text>
                </VStack>
              </Box>
            </SimpleGrid>
          </VStack>

          <VStack spacing={12}>
            <Heading as="h2" size="2xl" textAlign="center">
              Our Values
            </Heading>
            <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={8}>
              {values.map((value, index) => (
                <VStack 
                  key={index} 
                  bg={cardBg} 
                  p={8} 
                  rounded="xl" 
                  shadow="xl" 
                  align="start" 
                  spacing={6}
                  transition="all 0.3s"
                  _hover={{ transform: "translateY(-5px)", shadow: "2xl" }}
                >
                  <Flex align="center" justify="center" w={16} h={16} rounded="full" bg={useColorModeValue("brand.100", "brand.900")}>
                    <Icon as={value.icon} w={8} h={8} color={accentColor} />
                  </Flex>
                  <Heading as="h3" size="lg">{value.title}</Heading>
                  <Text fontSize="lg" color={useColorModeValue("gray.600", "gray.300")}>{value.description}</Text>
                </VStack>
              ))}
            </SimpleGrid>
          </VStack>


        </VStack>
      </Container>
    </Box>
  );
}

================
File: src\pages\activate\[uid]\[token].js
================
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import { Box, Heading, Text, VStack, Spinner } from '@chakra-ui/react';

const ActivationPage = () => {
  const router = useRouter();
  const [status, setStatus] = useState('loading');

  useEffect(() => {
    const { uid, token } = router.query;
    if (uid && token) {
      axios.get(`http://localhost:8000/api/activate/${uid}/${token}/`)
        .then(() => {
          setStatus('success');
        })
        .catch(() => {
          setStatus('error');
        });
    }
  }, [router.query]);

  if (status === 'loading') {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="100vh">
        <Spinner size="xl" />
      </Box>
    );
  }

  return (
    <Box maxW="md" mx="auto" mt={10}>
      <VStack spacing={4} align="center">
        <Heading>{status === 'success' ? 'Email Confirmed' : 'Activation Failed'}</Heading>
        <Text>
          {status === 'success' 
            ? 'Your email has been confirmed. An admin from your institution will activate your account shortly.' 
            : 'There was an error activating your account. Please try again or contact support.'}
        </Text>
      </VStack>
    </Box>
  );
};

export default ActivationPage;

================
File: src\pages\admin\panel.js
================
// src/pages/admin/panel.js
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import AdminPanel from '../../components/admin/AdminPanel';
import { Box, Heading, Spinner, Text } from '@chakra-ui/react';
import { useAuthCheck } from '../../hooks/useAuthCheck';

const AdminPanelPage = () => {
  const router = useRouter();
  const { isAuthorized, authChecked, loading } = useAuthCheck();

  useEffect(() => {
    if (authChecked && !isAuthorized) {
      router.push('/dashboard');
    }
  }, [authChecked, isAuthorized, router]);

  if (loading || !authChecked) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="100vh">
        <Spinner size="xl" />
      </Box>
    );
  }

  if (!isAuthorized) {
    return (
      <Box textAlign="center" mt={10}>
        <Heading size="lg" color="red.500">Unauthorized Access</Heading>
        <Text mt={4}>You do not have permission to view this page.</Text>
      </Box>
    );
  }

  return <AdminPanel />;
};

export default AdminPanelPage;

================
File: src\pages\ai-settings.js
================
import React from 'react';
import { useSelector } from 'react-redux';
import { Box, Heading, Text, VStack, useColorModeValue } from '@chakra-ui/react';
import AIModelConfig from '../components/ai-settings/AIModelConfig';
import PredictionThresholds from '../components/ai-settings/PredictionThresholds';
import FeatureImportance from '../components/ai-settings/FeatureImportance';
import ModelPerformance from '../components/ai-settings/ModelPerformance';

const AISettings = () => {
  const { user } = useSelector(state => state.auth);
  const bgColor = useColorModeValue('gray.50', 'gray.800');

  return (
    <Box maxW="container.xl" mx="auto" py={8} px={4} bg={bgColor}>
      <VStack spacing={8} align="stretch">
        <Box>
          <Heading size="xl" mb={2} color="brand.500">AI Settings & Configuration</Heading>
          <Text fontSize="lg" color={useColorModeValue('gray.600', 'gray.400')}>
            Customize and optimize AI model settings for {user.institution_name}.
          </Text>
        </Box>

        <AIModelConfig />
        <PredictionThresholds />
        <FeatureImportance />
        <ModelPerformance />
      </VStack>
    </Box>
  );
};

export default AISettings;

================
File: src\pages\blog.js
================
import { Box, Container, Heading, Text, Stack, VStack, SimpleGrid, useColorModeValue, Button } from "@chakra-ui/react";
import { FaArrowRight } from "react-icons/fa";

const articles = [
  { 
    title: "How to Reduce Gym Member Churn", 
    excerpt: "Learn effective strategies to keep your gym members engaged and reduce churn rates...",
    image: "/images/blog/reduce-churn.jpg"
  },
  { 
    title: "The Importance of Personalized Communication", 
    excerpt: "Discover how personalized communication can improve member retention and satisfaction...",
    image: "/images/blog/personalized-communication.jpg"
  },
  { 
    title: "Top Trends in Gym Management", 
    excerpt: "Stay ahead of the curve with the latest trends in gym management and member engagement...",
    image: "/images/blog/gym-trends.jpg"
  }
];

export default function Blog() {
  const bgColor = useColorModeValue("gray.50", "gray.900");
  const cardBg = useColorModeValue("white", "gray.800");

  return (
    <Box bg={bgColor}>
      <Container maxW="container.xl" py={20}>
        <VStack spacing={10} align="stretch">
          <Box textAlign="center">
            <Heading as="h1" size="2xl" mb={4}>
              Blog & Resources
            </Heading>
            <Text fontSize="xl" maxW="2xl" mx="auto">
              Stay updated with the latest insights, tips, and trends in gym management and member retention.
            </Text>
          </Box>

          <SimpleGrid columns={{ base: 1, md: 3 }} spacing={10}>
            {articles.map((article, index) => (
              <Box key={index} bg={cardBg} rounded="lg" overflow="hidden" shadow="md">
                <Box h="200px" bgImage={`url(${article.image})`} bgSize="cover" bgPosition="center" />
                <VStack p={6} align="start" spacing={4}>
                  <Heading as="h3" size="lg">
                    {article.title}
                  </Heading>
                  <Text>{article.excerpt}</Text>
                  <Button rightIcon={<FaArrowRight />} colorScheme="brand" variant="link">
                    Read More
                  </Button>
                </VStack>
              </Box>
            ))}
          </SimpleGrid>
        </VStack>
      </Container>
    </Box>
  );
}

================
File: src\pages\book-demo.js
================
import { Box, Container, Heading, Text, VStack, SimpleGrid, Input, Button, useColorModeValue, FormControl, FormLabel, Select, Textarea, Icon, HStack } from "@chakra-ui/react";
import { FaCalendarAlt, FaCheckCircle } from "react-icons/fa";

export default function BookDemo() {
  const bgColor = useColorModeValue("gray.50", "gray.900");
  const cardBg = useColorModeValue("white", "gray.800");
  const accentColor = useColorModeValue("brand.500", "brand.300");

  return (
    <Box bg={bgColor}>
      <Container maxW="container.xl" py={20}>
        <VStack spacing={16} align="stretch">
          <VStack spacing={5} textAlign="center">
            <Heading as="h1" size="3xl" fontWeight="bold">
              Book a{" "}
              <Text as="span" color={accentColor}>
                Free Demo
              </Text>
            </Heading>
            <Text fontSize="xl" maxW="2xl" mx="auto" color={useColorModeValue("gray.600", "gray.300")}>
              Experience firsthand how GymWise can revolutionize your gym's member retention and engagement. Schedule a personalized demo today.
            </Text>
          </VStack>

          <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={16}>
            <Box bg={cardBg} p={10} rounded="xl" shadow="xl">
              <VStack align="start" spacing={8}>
                <Heading as="h2" size="xl">
                  Schedule Your Demo
                </Heading>
                <FormControl>
                  <FormLabel>Your Name</FormLabel>
                  <Input placeholder="John Doe" size="lg" />
                </FormControl>
                <FormControl>
                  <FormLabel>Your Email</FormLabel>
                  <Input placeholder="john@example.com" type="email" size="lg" />
                </FormControl>
                <FormControl>
                  <FormLabel>Your Phone</FormLabel>
                  <Input placeholder="+1 (xxx) xxx-xxxx" size="lg" />
                </FormControl>
                <FormControl>
                  <FormLabel>Gym Name</FormLabel>
                  <Input placeholder="FitnessPro Gym" size="lg" />
                </FormControl>
                <FormControl>
                  <FormLabel>Gym Size</FormLabel>
                  <Select placeholder="Select gym size" size="lg">
                    <option value="small">Small (less than 500 members)</option>
                    <option value="medium">Medium (500-2000 members)</option>
                    <option value="large">Large (more than 2000 members)</option>
                  </Select>
                </FormControl>
                <FormControl>
                  <FormLabel>Preferred Demo Date</FormLabel>
                  <Input type="date" size="lg" />
                </FormControl>
                <FormControl>
                  <FormLabel>Additional Comments</FormLabel>
                  <Textarea placeholder="Any specific questions or areas you'd like us to focus on during the demo?" size="lg" />
                </FormControl>
                <Button 
                  colorScheme="brand" 
                  size="lg" 
                  width="full"
                  leftIcon={<FaCalendarAlt />}
                  _hover={{ transform: "translateY(-2px)", boxShadow: "lg" }}
                  transition="all 0.2s"
                >
                  Book Your Demo
                </Button>
              </VStack>
            </Box>

            <VStack spacing={8} align="stretch">
              <Box bg={cardBg} p={10} rounded="xl" shadow="xl">
                <VStack align="start" spacing={6}>
                  <Heading as="h2" size="xl">
                    What to Expect
                  </Heading>
                  <Text fontSize="lg" color={useColorModeValue("gray.600", "gray.300")}>
                    During your personalized demo, our expert team will:
                  </Text>
                  <VStack align="start" spacing={4}>
                    {[
                      "Showcase GymWise's key features",
                      "Demonstrate how our AI predicts member churn",
                      "Explain our personalized engagement strategies",
                      "Present our comprehensive analytics dashboard",
                      "Answer any questions you may have"
                    ].map((item, index) => (
                      <HStack key={index} spacing={4}>
                        <Icon as={FaCheckCircle} color={accentColor} w={5} h={5} />
                        <Text fontSize="lg">{item}</Text>
                      </HStack>
                    ))}
                  </VStack>
                </VStack>
              </Box>
              <Box bg={cardBg} p={10} rounded="xl" shadow="xl">
                <VStack align="start" spacing={6}>
                  <Heading as="h2" size="xl">
                    Why Choose GymWise?
                  </Heading>
                  <Text fontSize="lg" color={useColorModeValue("gray.600", "gray.300")}>
                    GymWise is the leading solution for gyms looking to:
                  </Text>
                  <VStack align="start" spacing={4}>
                    {[
                      "Increase member retention",
                      "Boost revenue through targeted engagement",
                      "Save time with automated processes",
                      "Make data-driven decisions",
                      "Improve overall member satisfaction"
                    ].map((item, index) => (
                      <HStack key={index} spacing={4}>
                        <Icon as={FaCheckCircle} color={accentColor} w={5} h={5} />
                        <Text fontSize="lg">{item}</Text>
                      </HStack>
                    ))}
                  </VStack>
                </VStack>
              </Box>
            </VStack>
          </SimpleGrid>
        </VStack>
      </Container>
    </Box>
  );
}

================
File: src\pages\contact-us.js
================
import React, { useState } from "react";
import {
  Box,
  Container,
  Heading,
  Text,
  VStack,
  SimpleGrid,
  Input,
  Textarea,
  Button,
  useColorModeValue,
  HStack,
  Icon,
  Flex,
  FormControl,
  FormLabel,
  useToast,
} from "@chakra-ui/react";
import { FaPhone, FaEnvelope, FaMapMarkerAlt, FaHeadset, FaGlobe } from "react-icons/fa";
import axios from "axios";

export default function ContactUs() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    message: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const toast = useToast();

  const bgColor = useColorModeValue("gray.50", "gray.900");
  const cardBg = useColorModeValue("white", "gray.800");
  const accentColor = useColorModeValue("brand.500", "brand.300");

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const response = await axios.post("http://localhost:8000/api/contact/", formData);
      toast({
        title: "Message Sent",
        description: "We've received your message and will get back to you soon.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      setFormData({ name: "", email: "", message: "" });
    } catch (error) {
      toast({
        title: "Error",
        description: error.response?.data?.error || "An error occurred. Please try again.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const ContactInfo = ({ icon, children }) => (
    <HStack spacing={4}>
      <Flex align="center" justify="center" w={10} h={10} rounded="full" bg={useColorModeValue("brand.100", "brand.900")}>
        <Icon as={icon} w={5} h={5} color={accentColor} />
      </Flex>
      <Text fontSize="lg">{children}</Text>
    </HStack>
  );

  const SupportInfo = ({ icon, title, children }) => (
    <HStack spacing={4} align="flex-start">
      <Flex align="center" justify="center" w={10} h={10} rounded="full" bg={useColorModeValue("brand.100", "brand.900")}>
        <Icon as={icon} w={5} h={5} color={accentColor} />
      </Flex>
      <VStack align="start" spacing={1}>
        <Text fontWeight="bold">{title}</Text>
        <Text>{children}</Text>
      </VStack>
    </HStack>
  );

  return (
    <Box bg={bgColor}>
      <Container maxW="container.xl" py={20}>
        <VStack spacing={16} align="stretch">
          <VStack spacing={5} textAlign="center">
            <Heading as="h1" size="3xl" fontWeight="bold">
              Get in{" "}
              <Text as="span" color={accentColor}>
                Touch
              </Text>
            </Heading>
            <Text fontSize="xl" maxW="2xl" mx="auto" color={useColorModeValue("gray.600", "gray.300")}>
              We're here to help. Reach out to us with any questions or concerns about how GymWise can transform your business.
            </Text>
          </VStack>

          <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={16}>
            <VStack spacing={8} align="stretch">
              <Box bg={cardBg} p={10} rounded="xl" shadow="xl">
                <form onSubmit={handleSubmit}>
                  <VStack align="start" spacing={8}>
                    <Heading as="h2" size="xl">
                      Send Us a Message
                    </Heading>
                    <FormControl isRequired>
                      <FormLabel>Your Name</FormLabel>
                      <Input
                        name="name"
                        value={formData.name}
                        onChange={handleInputChange}
                        placeholder="John Doe"
                        size="lg"
                      />
                    </FormControl>
                    <FormControl isRequired>
                      <FormLabel>Your Email</FormLabel>
                      <Input
                        name="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        placeholder="john@example.com"
                        type="email"
                        size="lg"
                      />
                    </FormControl>
                    <FormControl isRequired>
                      <FormLabel>Your Message</FormLabel>
                      <Textarea
                        name="message"
                        value={formData.message}
                        onChange={handleInputChange}
                        placeholder="How can we help you?"
                        size="lg"
                        minH="200px"
                      />
                    </FormControl>
                    <Button
                      type="submit"
                      colorScheme="brand"
                      size="lg"
                      width="full"
                      isLoading={isSubmitting}
                      loadingText="Sending..."
                      _hover={{ transform: "translateY(-2px)", boxShadow: "lg" }}
                      transition="all 0.2s"
                    >
                      Send Message
                    </Button>
                  </VStack>
                </form>
              </Box>
            </VStack>

            <VStack spacing={8} align="stretch">
              <Box bg={cardBg} p={10} rounded="xl" shadow="xl">
                <VStack align="start" spacing={8}>
                  <Heading as="h2" size="xl">
                    Contact Information
                  </Heading>
                  <VStack align="start" spacing={6} width="full">
                    <ContactInfo icon={FaPhone}>+966 502556166</ContactInfo>
                    <ContactInfo icon={FaEnvelope}>contact@gymwise.tech</ContactInfo>
                    <ContactInfo icon={FaMapMarkerAlt}>Riyadh, Saudi Arabia</ContactInfo>
                  </VStack>
                </VStack>
              </Box>
              <Box bg={cardBg} p={10} rounded="xl" shadow="xl">
                <VStack align="start" spacing={6}>
                  <Heading as="h2" size="xl">
                    Customer Support
                  </Heading>
                  <SupportInfo icon={FaHeadset} title="24/7 Availability">
                    Our support team is available round the clock to assist you.
                  </SupportInfo>
                  <SupportInfo icon={FaGlobe} title="Global Coverage">
                    We provide support across all time zones.
                  </SupportInfo>
                </VStack>
              </Box>
            </VStack>
          </SimpleGrid>
        </VStack>
      </Container>
    </Box>
  );
}

================
File: src\pages\dashboard.js
================
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { 
  Box, 
  Heading, 
  Text, 
  VStack, 
  SimpleGrid, 
  Stat, 
  StatLabel, 
  StatNumber, 
  StatHelpText, 
  StatArrow, 
  Icon, 
  Flex,
  useColorModeValue,
  Spinner
} from "@chakra-ui/react";
import { FiDollarSign, FiUsers, FiPercent, FiStar, FiUserPlus, FiActivity } from "react-icons/fi";
import HighLevelMetrics from '../components/dashboard/HighLevelMetrics';
import RevenueChart from '../components/dashboard/RevenueChart';
import QuickInsights from '../components/dashboard/QuickInsights';
import PerformanceOverview from '../components/dashboard/PerformanceOverview';
import { fetchRevenue } from '../redux/revenue/revenueActions';
import { fetchMetrics } from '../redux/metrics/metricsActions';
import { fetchInsights } from '../redux/insights/insightsActions';
import { fetchPerformance } from '../redux/performance/performanceActions';

const Dashboard = () => {
  const dispatch = useDispatch();
  const { user } = useSelector(state => state.auth);
  const { loading: metricsLoading, error: metricsError } = useSelector(state => state.metrics);
  const { loading: revenueLoading, error: revenueError } = useSelector(state => state.revenue);
  const { loading: insightsLoading, error: insightsError } = useSelector(state => state.insights);
  const { loading: performanceLoading, error: performanceError } = useSelector(state => state.performance);

  const bgColor = useColorModeValue('gray.50', 'gray.800');

  useEffect(() => {
    dispatch(fetchMetrics());
    dispatch(fetchRevenue());
    dispatch(fetchInsights());
    dispatch(fetchPerformance());
  }, [dispatch]);

  const isLoading = metricsLoading || revenueLoading || insightsLoading || performanceLoading;
  const hasError = metricsError || revenueError || insightsError || performanceError;

  if (isLoading) {
    return (
      <Flex justify="center" align="center" height="100vh">
        <Spinner size="xl" />
      </Flex>
    );
  }

  if (hasError) {
    return (
      <Box textAlign="center" mt={10}>
        <Heading size="lg" color="red.500">Error loading dashboard data</Heading>
        <Text mt={4}>{metricsError || revenueError || insightsError || performanceError}</Text>
      </Box>
    );
  }

  // Mock data for AI-driven metrics (replace with actual data from your Redux store)
  const aiMetrics = [
    { label: "Predicted Churn Rate", value: "7.2%", icon: FiUsers, change: -2.5, color: "green.500" },
    { label: "Avg. Engagement Score", value: "8.4/10", icon: FiStar, change: 0.3, color: "blue.500" },
    { label: "Retention Forecast", value: "92%", icon: FiPercent, change: 1.5, color: "purple.500" },
    { label: "AI-Suggested Campaigns", value: "3", icon: FiActivity, color: "orange.500" },
  ];

  return (
    <Box maxW="container.xl" mx="auto" py={8} px={4} bg={bgColor}>
      <VStack spacing={8} align="stretch">
        <Flex justifyContent="space-between" alignItems="center">
          <Box>
            <Heading size="xl" color="brand.500">Dashboard</Heading>
            <Text color="gray.500" fontWeight="medium">
              Welcome back, {user.first_name} | {user.institution_name}
            </Text>
          </Box>
        </Flex>
        
        <HighLevelMetrics />
        
        <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6}>
          {aiMetrics.map((metric, index) => (
            <Stat
              key={index}
              px={4}
              py={5}
              shadow="xl"
              border="1px solid"
              borderColor={useColorModeValue('gray.200', 'gray.500')}
              rounded="lg"
              bg={useColorModeValue('white', 'gray.700')}
            >
              <Flex justifyContent="space-between">
                <Box pl={3}>
                  <StatLabel fontWeight="medium" isTruncated>
                    {metric.label}
                  </StatLabel>
                  <StatNumber fontSize="2xl" fontWeight="medium">
                    {metric.value}
                  </StatNumber>
                  {metric.change && (
                    <StatHelpText>
                      <StatArrow type={metric.change > 0 ? 'increase' : 'decrease'} />
                      {Math.abs(metric.change)}%
                    </StatHelpText>
                  )}
                </Box>
                <Box
                  my="auto"
                  color={useColorModeValue('gray.800', 'gray.200')}
                  alignContent="center"
                >
                  <Icon as={metric.icon} w={8} h={8} />
                </Box>
              </Flex>
            </Stat>
          ))}
        </SimpleGrid>
        
        <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={8}>
          <RevenueChart />
          <PerformanceOverview />
        </SimpleGrid>
        
        <QuickInsights />
      </VStack>
    </Box>
  );
};

export default Dashboard;

================
File: src\pages\data-management.js
================
import React from 'react';
import { useSelector } from 'react-redux';
import { Box, Heading, Text, VStack, useColorModeValue } from '@chakra-ui/react';
import DataUploadForm from '../components/data-management/DataUploadForm';
import DataStatusOverview from '../components/data-management/DataStatusOverview';

const DataManagement = () => {
  const { user } = useSelector(state => state.auth);
  const bgColor = useColorModeValue('gray.50', 'gray.800');

  return (
    <Box maxW="container.xl" mx="auto" py={8} px={4} bg={bgColor}>
      <VStack spacing={8} align="stretch">
        <Box>
          <Heading size="xl" mb={2} color="brand.500">Data Management</Heading>
          <Text fontSize="lg" color={useColorModeValue('gray.600', 'gray.400')}>
            Upload and manage {user.institution_name}'s member data to power AI insights.
          </Text>
        </Box>

        <DataUploadForm />
        <DataStatusOverview />
      </VStack>
    </Box>
  );
};

export default DataManagement;

================
File: src\pages\engagement.js
================
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Box, Heading, Text, Flex, Button, useColorModeValue, VStack, Icon, useDisclosure, Spinner } from '@chakra-ui/react';
import { FiPlus } from 'react-icons/fi';
import CampaignCreator from '../components/engagement/CampaignCreator';
import ActiveCampaigns from '../components/engagement/ActiveCampaigns';
import CampaignInsights from '../components/engagement/CampaignInsights';
import { fetchCampaignSuggestions, fetchCampaignPerformance } from '../redux/campaigns/campaignsActions';

const Engagement = () => {
  const dispatch = useDispatch();
  const { user } = useSelector(state => state.auth);
  const { campaignSuggestions, campaignPerformance, loading, error } = useSelector(state => state.campaigns);
  const bgColor = useColorModeValue('gray.50', 'gray.800');
  const { isOpen, onOpen, onClose } = useDisclosure();

  useEffect(() => {
    dispatch(fetchCampaignSuggestions());
    dispatch(fetchCampaignPerformance());
  }, [dispatch]);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="100vh">
        <Spinner size="xl" />
      </Box>
    );
  }

  if (error) {
    return (
      <Box textAlign="center" mt={10}>
        <Heading size="lg" color="red.500">Error: {error}</Heading>
      </Box>
    );
  }

  return (
    <Box maxW="container.xl" mx="auto" py={8} px={4} bg={bgColor}>
      <VStack spacing={8} align="stretch">
        <Flex justifyContent="space-between" alignItems="flex-start">
          <Box>
            <Heading size="xl" mb={2} color="brand.500">Engagement Orchestrator</Heading>
            <Text fontSize="lg" color={useColorModeValue('gray.600', 'gray.400')}>
              Create and manage personalized engagement campaigns for {user.institution_name} members.
            </Text>
          </Box>
          <Button
            leftIcon={<Icon as={FiPlus} />}
            colorScheme="brand"
            size="md"
            onClick={onOpen}
          >
            Create Campaign
          </Button>
        </Flex>

        <CampaignInsights />
        <ActiveCampaigns campaigns={campaignPerformance} />
      </VStack>

      <CampaignCreator 
        isOpen={isOpen} 
        onClose={onClose} 
        suggestions={campaignSuggestions}
        onCampaignCreated={() => {
          dispatch(fetchCampaignSuggestions());
          dispatch(fetchCampaignPerformance());
        }}
      />
    </Box>
  );
};

export default Engagement;

================
File: src\pages\features.js
================
// pages/features.js
import { Box, Container, Heading, Text, SimpleGrid, Icon, VStack } from "@chakra-ui/react";
import { FaRegThumbsUp, FaRegSmile, FaDollarSign } from "react-icons/fa";
import Navbar from "../components/layout/Navbar";

const features = [
  {
    title: "Churn Prediction",
    icon: FaRegThumbsUp,
    description: "Predict member churn and take proactive measures to retain them using our advanced AI algorithms. Our predictive models analyze member behavior and identify those at risk of leaving, allowing you to take action before it's too late."
  },
  {
    title: "Personalized Communication",
    icon: FaRegSmile,
    description: "Engage your members with personalized messages and offers tailored to their preferences and behaviors. Our platform helps you send targeted communications that resonate with each member, improving engagement and satisfaction."
  },
  {
    title: "Performance Analytics",
    icon: FaDollarSign,
    description: "Gain insights into your gym's performance with detailed analytics and reporting tools. Track key metrics, identify trends, and make data-driven decisions to optimize your operations and drive growth."
  }
];

export default function Features() {
  return (
    <>
      <Navbar />
      <Container maxW="container.xl" centerContent>
        <Box py={10} px={6}>
          <Heading textAlign="center" fontSize="3xl" mb={6} color="#002060">
            Features
          </Heading>
          <SimpleGrid columns={{ base: 1, md: 3 }} spacing={10}>
            {features.map((feature) => (
              <VStack key={feature.title} spacing={3}>
                <Icon as={feature.icon} w={10} h={10} color="#249EA1" />
                <Heading fontSize="xl">{feature.title}</Heading>
                <Text textAlign="center" color="gray.600">{feature.description}</Text>
              </VStack>
            ))}
          </SimpleGrid>
        </Box>
      </Container>
    </>
  );
}

================
File: src\pages\forgot-password.js
================
import ForgotPasswordForm from "../components/accounts/ForgotPasswordForm";

const ForgotPassword = () => {
  return (
    <div>
      <ForgotPasswordForm />
    </div>
  );
};

export default ForgotPassword;

================
File: src\pages\index.js
================
import { Box, Container, Heading, Text, Button, Stack, SimpleGrid, Icon, VStack, HStack, useColorModeValue, Flex, Divider, Badge } from "@chakra-ui/react";
import { FaChartLine, FaUserFriends, FaRobot, FaArrowRight, FaCheckCircle } from "react-icons/fa";
import { useRouter } from "next/router";
import { useSelector } from 'react-redux';
import Image from "next/image";

const features = [
  {
    title: "AI-Powered Churn Prediction",
    icon: FaRobot,
    description: "Harness the power of machine learning to identify at-risk members before they leave."
  },
  {
    title: "Personalized Engagement",
    icon: FaUserFriends,
    description: "Tailor your communication and offers to each member's unique preferences and behaviors."
  },
  {
    title: "Data-Driven Insights",
    icon: FaChartLine,
    description: "Make informed decisions with comprehensive analytics and actionable reports."
  }
];

export default function Home() {
  const router = useRouter();
  const { user } = useSelector(state => state.auth);
  const bgColor = useColorModeValue("gray.50", "gray.900");
  const cardBg = useColorModeValue("white", "gray.800");
  const accentColor = useColorModeValue("brand.500", "brand.300");

  return (
    <Box>
      <Box bg={bgColor} py={20}>
        <Container maxW="container.xl">
          <Stack direction={{ base: "column", lg: "row" }} spacing={16} alignItems="center">
            <VStack spacing={8} align="flex-start" maxW="lg">
              <Badge colorScheme="brand" fontSize="md" px={3} py={1} rounded="full">AI-Powered Solutions</Badge>
              <Heading as="h1" size="3xl" fontWeight="bold" lineHeight="shorter">
                {user?.institution ? `Welcome to ${user.institution.name}` : "Revolutionize Your Gym's"}{" "}
                <Text as="span" color={accentColor}>
                  {user?.institution ? "Dashboard" : "Member Retention"}
                </Text>
              </Heading>
              <Text fontSize="xl" color={useColorModeValue("gray.600", "gray.300")}>
                {user?.institution
                  ? `Empower your gym with AI-driven insights to boost member engagement and maximize revenue.`
                  : `GymWise empowers fitness businesses with AI-driven insights to boost member engagement, reduce churn, and maximize revenue.`}
              </Text>
              <Button 
                size="lg" 
                colorScheme="brand" 
                onClick={() => router.push(user ? '/dashboard' : '/book-demo')}
                px={8}
                fontSize="lg"
                align="center"
                fontWeight="bold"
                _hover={{ transform: "translateY(-2px)", boxShadow: "lg" }}
                transition="all 0.2s"
              >
                {user ? 'Go to Dashboard' : 'Book a Free Demo'}
              </Button>
            </VStack>
            <Box 
              boxSize={{ base: "sm", md: "md", lg: "lg" }} 
              position="relative" 
              overflow="hidden" 
              rounded="2xl" 
              shadow="2xl"
            >
              <Image src="/images/horizon-dashboard.png" alt="GymWise Dashboard" width={600} height={400} objectFit="cover" />
            </Box>
          </Stack>
        </Container>
      </Box>

      {!user && (
        <Container maxW="container.xl" py={20}>
          <VStack spacing={20}>
            <VStack spacing={5}>
              <Heading as="h2" size="2xl" textAlign="center">
                Empower Your Gym with{" "}
                <Text as="span" color={accentColor}>
                  Data-Driven Intelligence
                </Text>
              </Heading>
              <Text fontSize="xl" textAlign="center" maxW="2xl" color={useColorModeValue("gray.600", "gray.300")}>
                GymWise leverages cutting-edge AI to transform your member data into actionable strategies, helping you retain members and grow your business.
              </Text>
            </VStack>
            
            <SimpleGrid columns={{ base: 1, md: 3 }} spacing={10} w="full">
              {features.map((feature, index) => (
                <VStack 
                  key={index}
                  bg={cardBg}
                  p={8}
                  rounded="xl"
                  shadow="xl"
                  spacing={6}
                  align="flex-start"
                  borderTop="4px solid"
                  borderColor="brand.500"
                  transition="all 0.3s"
                  _hover={{ transform: "translateY(-5px)", shadow: "2xl" }}
                >
                  <Flex align="center" justify="center" w={16} h={16} rounded="full" bg={useColorModeValue("brand.100", "brand.900")}>
                    <Icon as={feature.icon} w={8} h={8} color="brand.500" />
                  </Flex>
                  <Heading as="h3" size="lg">{feature.title}</Heading>
                  <Divider borderColor={useColorModeValue("gray.200", "gray.700")} />
                  <Text color={useColorModeValue("gray.600", "gray.300")} fontSize="lg">{feature.description}</Text>
                </VStack>
              ))}
            </SimpleGrid>
          </VStack>
        </Container>
      )}
    </Box>
  );
}

================
File: src\pages\login.js
================
import LoginForm from "../components/accounts/LoginForm";

const Login = () => {
  return (
    <div>
      <LoginForm />
    </div>
  );
};

export default Login;

================
File: src\pages\member-insights.js
================
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Box, Heading, SimpleGrid, Text, useColorModeValue, VStack, Spinner } from '@chakra-ui/react';
import MemberDistributionChart from '../components/memberInsights/MemberDistributionChart';
import RetentionAlerts from '../components/memberInsights/RetentionAlerts';
import MemberSegmentBreakdown from '../components/memberInsights/MemberSegmentBreakdown';
import WhatIfScenario from '../components/memberInsights/WhatIfScenario';
import { fetchMemberInsights, fetchChurnDistribution, fetchMemberSegments } from '../redux/members/membersActions';

const MemberInsights = () => {
  const dispatch = useDispatch();
  const { user } = useSelector(state => state.auth);
  const { memberInsights, churnDistribution, memberSegments, loading, error } = useSelector(state => state.members);
  const bgColor = useColorModeValue('gray.50', 'gray.800');

  useEffect(() => {
    dispatch(fetchMemberInsights());
    dispatch(fetchChurnDistribution());
    dispatch(fetchMemberSegments());
  }, [dispatch]);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="100vh">
        <Spinner size="xl" />
      </Box>
    );
  }

  if (error) {
    return (
      <Box textAlign="center" mt={10}>
        <Heading size="lg" color="red.500">Error: {error}</Heading>
      </Box>
    );
  }

  return (
    <Box maxW="container.xl" mx="auto" py={8} px={4} bg={bgColor}>
      <VStack spacing={8} align="stretch">
        <Box>
          <Heading mb={2} size="2xl" color="brand.500">Member Insights</Heading>
          <Text mb={6} color={useColorModeValue('gray.600', 'gray.400')} fontSize="lg">
            Leverage our AI-powered analytics to understand and improve member retention for {user.institution_name}.
          </Text>
        </Box>
        
        {churnDistribution && <MemberDistributionChart data={churnDistribution} />}
        
        <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={8}>
          {memberInsights && <RetentionAlerts insights={memberInsights} />}
          {memberSegments && <MemberSegmentBreakdown segments={memberSegments} />}
        </SimpleGrid>

        <WhatIfScenario />
      </VStack>
    </Box>
  );
};

export default MemberInsights;

================
File: src\pages\members\index.js
================
import React from 'react';
import { Box, Heading, VStack, useColorModeValue } from '@chakra-ui/react';
import MemberListView from '../../components/members/MemberListView';
import { useSelector } from 'react-redux';

const MembersPage = () => {
  const { user } = useSelector(state => state.auth);
  const bgColor = useColorModeValue('gray.50', 'gray.800');

  return (
    <Box maxW="container.xl" mx="auto" py={8} px={4} bg={bgColor}>
      <VStack spacing={8} align="stretch">
        <Heading size="xl" color="brand.500">Member Management</Heading>
        <MemberListView />
      </VStack>
    </Box>
  );
};

export default MembersPage;

================
File: src\pages\members\[id].js
================
import React from 'react';
import { Box, Heading, VStack, useColorModeValue } from '@chakra-ui/react';
import MemberDetailView from '../../components/members/MemberDetailView';
import { useRouter } from 'next/router';

const MemberDetailPage = () => {
  const router = useRouter();
  const { id } = router.query;
  const bgColor = useColorModeValue('gray.50', 'gray.800');

  return (
    <Box maxW="container.xl" mx="auto" py={8} px={4} bg={bgColor}>
      <VStack spacing={8} align="stretch">
        <Heading size="xl" color="brand.500">Member Details</Heading>
        <MemberDetailView memberId={id} />
      </VStack>
    </Box>
  );
};

export default MemberDetailPage;

================
File: src\pages\old-dashboard.js
================
import React from 'react';
import {
  Box, Flex, Grid, Heading, Text, Icon, SimpleGrid, Progress, Button,
  useColorModeValue, Avatar, AvatarGroup, Table, Thead, Tbody, Tr, Th, Td,
  Tooltip, useDisclosure, Modal, ModalOverlay, ModalContent, ModalHeader, ModalBody, ModalCloseButton,
  Stat, StatLabel, StatNumber, StatHelpText, StatArrow, Badge, VStack, HStack, Divider, Tag, ListItem, UnorderedList
} from '@chakra-ui/react';
import { FiDollarSign, FiUsers, FiUserPlus, FiShoppingCart, FiActivity, FiClock, FiCalendar, FiAlertCircle, FiCheckCircle, FiInfo, FiTrendingUp, FiTarget, FiMail, FiAward, FiMessageCircle } from 'react-icons/fi';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer, PieChart, Pie, Cell, Area, AreaChart } from 'recharts';

const mockRevenueData = [
  { month: 'Jan', revenue: 4000, lastYear: 3500 },
  { month: 'Feb', revenue: 3000, lastYear: 2800 },
  { month: 'Mar', revenue: 5000, lastYear: 4200 },
  { month: 'Apr', revenue: 4500, lastYear: 3900 },
  { month: 'May', revenue: 6000, lastYear: 5100 },
  { month: 'Jun', revenue: 5500, lastYear: 4800 },
];

const mockActiveUsersData = [
  { name: 'Mon', users: 300 },
  { name: 'Tue', users: 450 },
  { name: 'Wed', users: 200 },
  { name: 'Thu', users: 400 },
  { name: 'Fri', users: 300 },
  { name: 'Sat', users: 450 },
  { name: 'Sun', users: 350 },
];

const mockChurnData = [
  { name: 'Safe', value: 1500, color: '#48BB78' },
  { name: 'At Risk', value: 500, color: '#ECC94B' },
  { name: 'Likely to Churn', value: 300, color: '#F56565' },
];

const StatCard = ({ title, value, icon, change, color }) => {
  const bgColor = useColorModeValue('white', 'gray.700');
  const textColor = useColorModeValue('gray.600', 'gray.200');

  return (
    <Box 
      bg={bgColor} 
      p={6} 
      rounded="xl" 
      shadow="xl" 
      borderWidth="1px" 
      borderColor={useColorModeValue('gray.100', 'gray.600')}
      transition="all 0.3s"
      _hover={{ transform: 'translateY(-5px)', shadow: '2xl' }}
    >
      <Flex justifyContent="space-between" alignItems="center">
        <Box>
          <Text fontSize="sm" color={textColor} fontWeight="medium" mb={2}>
            {title}
          </Text>
          <Text fontSize="3xl" fontWeight="bold" color={color}>
            {value}
          </Text>
          {change && (
            <Text fontSize="sm" color={change > 0 ? "green.500" : "red.500"} mt={2}>
              {change > 0 ? `↑ ${change}%` : `↓ ${Math.abs(change)}%`}
            </Text>
          )}
        </Box>
        <Box p={3} bg={`${color}30`} rounded="full">
          <Icon as={icon} w={6} h={6} color={color} />
        </Box>
      </Flex>
    </Box>
  );
};

const ChurnPredictionCard = () => {
  const cardBg = useColorModeValue('white', 'gray.700');
  const textColor = useColorModeValue('gray.600', 'gray.200');
  const { isOpen, onOpen, onClose } = useDisclosure();

  return (
    <Box bg={cardBg} p={6} rounded="xl" shadow="xl">
      <Flex justifyContent="space-between" alignItems="center" mb={4}>
        <Heading size="md">Member Churn Prediction</Heading>
        <Icon as={FiInfo} w={5} h={5} color="brand.500" cursor="pointer" onClick={onOpen} />
      </Flex>
      <ResponsiveContainer width="100%" height={300}>
        <PieChart>
          <Pie
            data={mockChurnData}
            cx="50%"
            cy="50%"
            innerRadius={60}
            outerRadius={80}
            paddingAngle={5}
            dataKey="value"
          >
            {mockChurnData.map((entry, index) => (
              <Cell key={`cell-${index}`} fill={entry.color} />
            ))}
          </Pie>
          <RechartsTooltip />
        </PieChart>
      </ResponsiveContainer>
      <SimpleGrid columns={3} spacing={4} mt={4}>
        {mockChurnData.map((item, index) => (
          <Box key={index}>
            <Text fontWeight="bold" color={item.color}>{item.value} {item.name}</Text>
            <Text fontSize="sm" color={textColor}>
              {index === 0 && "No action needed"}
              {index === 1 && "Consider outreach"}
              {index === 2 && "Urgent intervention"}
            </Text>
          </Box>
        ))}
      </SimpleGrid>
      <Button colorScheme="brand" size="sm" mt={4} w="full">View Detailed Report</Button>

      <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>About Churn Prediction</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <Text>
              Our AI-driven churn prediction model analyzes member behavior patterns, attendance frequency, and engagement levels to categorize members into three risk groups:
            </Text>
            <UnorderedList mt={2}>
              <ListItem>Safe: Regular attendees with high engagement</ListItem>
              <ListItem>At Risk: Showing signs of reduced engagement</ListItem>
              <ListItem>Likely to Churn: Significant decrease in attendance and engagement</ListItem>
            </UnorderedList>
            <Text mt={2}>
              Use this information to tailor your retention strategies and personalize member experiences.
            </Text>
          </ModalBody>
        </ModalContent>
      </Modal>
    </Box>
  );
};

const RevenueOverview = () => {
  const cardBg = useColorModeValue('white', 'gray.700');
  const textColor = useColorModeValue('gray.600', 'gray.200');

  const currentRevenue = mockRevenueData.reduce((sum, item) => sum + item.revenue, 0);
  const lastYearRevenue = mockRevenueData.reduce((sum, item) => sum + item.lastYear, 0);
  const growthRate = ((currentRevenue - lastYearRevenue) / lastYearRevenue * 100).toFixed(1);

  return (
    <Box bg={cardBg} p={6} rounded="xl" shadow="xl">
      <Flex justifyContent="space-between" alignItems="center" mb={4}>
        <Heading size="md">Revenue Overview</Heading>
        <Button size="sm" colorScheme="brand">Export Report</Button>
      </Flex>
      <SimpleGrid columns={{ base: 1, md: 3 }} gap={4} mb={6}>
        <Stat>
          <StatLabel color={textColor}>Total Revenue</StatLabel>
          <StatNumber>${currentRevenue.toLocaleString()}</StatNumber>
          <StatHelpText>
            <StatArrow type={growthRate > 0 ? 'increase' : 'decrease'} />
            {growthRate}% from last year
          </StatHelpText>
        </Stat>
        <Stat>
          <StatLabel color={textColor}>Average Monthly</StatLabel>
          <StatNumber>${(currentRevenue / 6).toLocaleString()}</StatNumber>
        </Stat>
        <Stat>
          <StatLabel color={textColor}>Projected Annual</StatLabel>
          <StatNumber>${(currentRevenue * 2).toLocaleString()}</StatNumber>
        </Stat>
      </SimpleGrid>
      <ResponsiveContainer width="100%" height={300}>
        <AreaChart data={mockRevenueData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="month" />
          <YAxis />
          <RechartsTooltip />
          <Area type="monotone" dataKey="revenue" stroke="#48BB78" fill="#48BB7820" />
          <Area type="monotone" dataKey="lastYear" stroke="#4299E1" fill="#4299E120" />
        </AreaChart>
      </ResponsiveContainer>
      <Flex justifyContent="center" mt={4}>
        <Box mr={4}>
          <Icon as={FiTrendingUp} color="green.500" mr={2} />
          <Text as="span" fontWeight="bold">This Year</Text>
        </Box>
        <Box>
          <Icon as={FiTarget} color="blue.500" mr={2} />
          <Text as="span" fontWeight="bold">Last Year</Text>
        </Box>
      </Flex>
    </Box>
  );
};

const ActiveUsersChart = () => {
  const cardBg = useColorModeValue('white', 'gray.700');

  return (
    <Box bg={cardBg} p={6} rounded="xl" shadow="xl">
      <Heading size="md" mb={4}>Active Users</Heading>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={mockActiveUsersData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis />
          <RechartsTooltip />
          <Bar dataKey="users" fill="#4299E1" />
        </BarChart>
      </ResponsiveContainer>
    </Box>
  );
};

const RetentionStrategies = () => {
  const cardBg = useColorModeValue('white', 'gray.700');
  const textColor = useColorModeValue('gray.600', 'gray.200');

  const strategies = [
    { name: 'Personalized Email Campaign', icon: FiMail, targetGroup: 'At Risk', progress: 80, impact: '+15% engagement' },
    { name: 'Loyalty Rewards Program', icon: FiAward, targetGroup: 'All Members', progress: 60, impact: '+8% retention' },
    { name: 'One-on-One Consultations', icon: FiMessageCircle, targetGroup: 'Likely to Churn', progress: 30, impact: '+25% recovery' },
  ];

  return (
    <Box bg={cardBg} p={6} rounded="xl" shadow="xl">
      <Flex justifyContent="space-between" alignItems="center" mb={4}>
        <Heading size="md">Retention Strategies</Heading>
        <Button size="sm" colorScheme="brand">Create New Strategy</Button>
      </Flex>
      <VStack spacing={4} align="stretch">
        {strategies.map((strategy, index) => (
          <Box key={index} p={4} borderWidth={1} borderColor={useColorModeValue('gray.200', 'gray.600')} rounded="md">
            <Flex alignItems="center" mb={2}>
              <Icon as={strategy.icon} w={6} h={6} color="brand.500" mr={3} />
              <VStack align="start" spacing={0} flex={1}>
                <Text fontWeight="bold">{strategy.name}</Text>
                <HStack>
                  <Badge colorScheme={strategy.targetGroup === 'At Risk' ? 'yellow' : strategy.targetGroup === 'Likely to Churn' ? 'red' : 'green'}>
                    {strategy.targetGroup}
                  </Badge>
                  <Text fontSize="sm" color="green.500">{strategy.impact}</Text>
                </HStack>
              </VStack>
              <Button size="sm" colorScheme="brand" variant="outline">View</Button>
            </Flex>
            <Progress value={strategy.progress} size="sm" colorScheme="brand" rounded="full" />
          </Box>
        ))}
      </VStack>
    </Box>
  );
};

const RecentActivities = () => {
  const cardBg = useColorModeValue('white', 'gray.700');
  const textColor = useColorModeValue('gray.600', 'gray.200');

  const activities = [
    { icon: FiUserPlus, text: "New member sign-up: Sarah Johnson", time: "2 hours ago", category: "New Member", action: "Welcome" },
    { icon: FiActivity, text: "High traffic alert: 85% capacity reached", time: "4 hours ago", category: "Facility", action: "Review" },
    { icon: FiClock, text: "New class added: 'HIIT Cardio' on Tuesdays", time: "Yesterday", category: "Classes", action: "Promote" },
    { icon: FiCalendar, text: "Upcoming event: Summer Fitness Challenge", time: "2 days ago", category: "Event", action: "Prepare" },
    { icon: FiAlertCircle, text: "10 members moved to 'At Risk' category", time: "3 days ago", category: "Retention", action: "Intervene" },
    { icon: FiCheckCircle, text: "Retention campaign launched for 'Likely to Churn' group", time: "4 days ago", category: "Campaign", action: "Monitor" },
  ];

  return (
    <Box bg={cardBg} p={6} rounded="xl" shadow="xl">
      <Flex justifyContent="space-between" alignItems="center" mb={4}>
        <Heading size="md">Recent Activities</Heading>
        <Button size="sm" colorScheme="brand">View All</Button>
      </Flex>
      <VStack spacing={4} align="stretch">
        {activities.map((activity, index) => (
          <Flex key={index} alignItems="center" p={3} borderWidth={1} borderColor={useColorModeValue('gray.200', 'gray.600')} rounded="md">
            <Icon as={activity.icon} w={6} h={6} color="brand.500" mr={4} />
            <VStack align="start" spacing={0} flex={1}>
              <Text fontWeight="medium">{activity.text}</Text>
              <HStack>
                <Text fontSize="sm" color={textColor}>{activity.time}</Text>
                <Badge colorScheme="brand">{activity.category}</Badge>
              </HStack>
            </VStack>
            <Button size="sm" colorScheme="brand" variant="outline">{activity.action}</Button>
          </Flex>
        ))}
        </VStack>
    </Box>
  );
};

const Dashboard = () => {
  const bgColor = useColorModeValue('gray.50', 'gray.800');

  return (
    <Box maxW="container.xl" mx="auto" py={8} px={4} bg={bgColor}>
      <Flex justifyContent="space-between" alignItems="center" mb={8}>
        <Heading size="lg">Dashboard</Heading>
        <Text color="gray.500">Welcome back, John Doe</Text>
      </Flex>

      <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6} mb={8}>
        <StatCard title="Today's Revenue" value="$53,000" icon={FiDollarSign} change={5.5} color="green.500" />
        <StatCard title="Active Members" value="2,300" icon={FiUsers} change={3} color="blue.500" />
        <StatCard title="New Sign-ups" value="120" icon={FiUserPlus} change={-2.5} color="purple.500" />
        <StatCard title="Total Sales" value="$173,000" icon={FiShoppingCart} change={8} color="orange.500" />
      </SimpleGrid>

      <Grid templateColumns={{ base: "1fr", lg: "2fr 1fr" }} gap={6} mb={8}>
        <ChurnPredictionCard />
        <ActiveUsersChart />
      </Grid>

      <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={6} mb={8}>
        <RevenueOverview />
        <RetentionStrategies />
      </SimpleGrid>

      <RecentActivities />
    </Box>
  );
};

export default Dashboard;

================
File: src\pages\posts\first-post.js
================
import Link from 'next/link';
import Head from 'next/head';
import Script from 'next/script';
import Layout from '../../components/layout/layout';

export default function FirstPost() {
  return( 
    <Layout>
      <Head>
        <title>First Paaage</title>
      </Head>
      <Script
        src="https://connect.facebook.net/en_US/sdk.js"
        strategy="lazyOnload"
        onLoad={() =>
          console.log(`script loaded correctly, window.FB has been populated`)
        }
      />
    <div>
  <h1>First Paage!</h1>
  <h2>
        <Link href="/">Back home</Link>
      </h2>
  </div>
  </Layout>
  );
}

================
File: src\pages\register.js
================
import RegisterForm from "../components/accounts/RegisterForm";

const Register = () => {
  return (
    <div>
      <RegisterForm />
    </div>
  );
};

export default Register;

================
File: src\pages\registration-success.js
================
import React from 'react';
import { Box, Heading, Text, VStack, Button, Icon, useColorModeValue, HStack } from '@chakra-ui/react';
import { useRouter } from 'next/router';
import { FaCheckCircle, FaEnvelope, FaUserCog, FaHome } from 'react-icons/fa';

const RegistrationSuccess = () => {
  const router = useRouter();
  const bgColor = useColorModeValue('gray.50', 'gray.800');
  const cardBg = useColorModeValue('white', 'gray.700');

  return (
    <Box bg={bgColor} minHeight="100vh" py={10}>
      <Box maxW="container.md" mx="auto" bg={cardBg} p={8} borderRadius="lg" boxShadow="xl">
        <VStack spacing={8} align="stretch">
          <VStack>
            <Icon as={FaCheckCircle} w={16} h={16} color="green.500" />
            <Heading as="h1" size="xl" textAlign="center" color="green.500">
              Registration Successful!
            </Heading>
          </VStack>
          
          <Text fontSize="xl" textAlign="center" fontWeight="bold">
            Welcome to GymWise! Your journey towards better gym management starts here.
          </Text>
          
          <VStack spacing={6} align="stretch" bg={useColorModeValue('gray.100', 'gray.600')} p={6} borderRadius="md">
            <HStack>
              <Icon as={FaEnvelope} w={6} h={6} color="blue.500" />
              <VStack align="start" spacing={1}>
                <Text fontSize="lg" fontWeight="semibold">Step 1: Confirm Your Email</Text>
                <Text fontSize="md">
                  Please check your inbox for a confirmation email. Click the link inside to verify your email address.
                </Text>
              </VStack>
            </HStack>
            
            <HStack>
              <Icon as={FaUserCog} w={6} h={6} color="purple.500" />
              <VStack align="start" spacing={1}>
                <Text fontSize="lg" fontWeight="semibold">Step 2: Admin Review</Text>
                <Text fontSize="md">
                  Once your email is confirmed, our admin team will review your account. This helps us maintain a secure environment for all our users.
                </Text>
              </VStack>
            </HStack>
            
            <HStack>
              <Icon as={FaEnvelope} w={6} h={6} color="green.500" />
              <VStack align="start" spacing={1}>
                <Text fontSize="lg" fontWeight="semibold">Step 3: Account Activation</Text>
                <Text fontSize="md">
                  You'll receive another email once your account is activated. Then you'll be all set to start using GymWise!
                </Text>
              </VStack>
            </HStack>
          </VStack>
          
          <Text fontSize="lg" textAlign="center" fontStyle="italic">
            Thank you for choosing GymWise. We're excited to help you revolutionize your gym management!
          </Text>
          
          <Button 
            leftIcon={<FaHome />}
            colorScheme="blue" 
            size="lg"
            onClick={() => router.push('/')} 
            alignSelf="center"
          >
            Return to Home
          </Button>
        </VStack>
      </Box>
    </Box>
  );
};

export default RegistrationSuccess;

================
File: src\pages\reports.js
================
import React from 'react';
import { useSelector } from 'react-redux';
import { Box, Heading, Text, Flex, VStack, useColorModeValue, Tabs, TabList, TabPanels, Tab, TabPanel, Icon } from '@chakra-ui/react';
import { FiFileText, FiList } from 'react-icons/fi';
import ReportBuilder from '../components/reports/ReportBuilder';
import ReportList from '../components/reports/ReportList';
import AnalyticsDashboard from '../components/reports/AnalyticsDashboard';

const Reports = () => {
  const { user } = useSelector(state => state.auth);
  const bgColor = useColorModeValue('gray.50', 'gray.800');

  return (
    <Box maxW="container.xl" mx="auto" py={8} px={4} bg={bgColor}>
      <VStack spacing={8} align="stretch">
        <Flex justifyContent="space-between" alignItems="flex-start">
          <Box>
            <Heading size="xl" mb={2} color="brand.500">Reports & Analytics</Heading>
            <Text fontSize="lg" color={useColorModeValue('gray.600', 'gray.400')}>
              Generate custom reports and gain deeper insights into {user.institution_name}'s performance.
            </Text>
          </Box>
        </Flex>

        <AnalyticsDashboard />

        <Tabs colorScheme="brand" variant="soft-rounded" size="lg">
          <TabList>
            <Tab><Icon as={FiFileText} mr={2} />Report Builder</Tab>
            <Tab><Icon as={FiList} mr={2} />Generated Reports</Tab>
          </TabList>
          <TabPanels mt={6}>
            <TabPanel p={0}>
              <ReportBuilder />
            </TabPanel>
            <TabPanel p={0}>
              <ReportList />
            </TabPanel>
          </TabPanels>
        </Tabs>
      </VStack>
    </Box>
  );
};

export default Reports;

================
File: src\pages\reset-password\[uid]\[token].js
================
import { useState } from 'react';
import { useRouter } from 'next/router';
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Input,
  VStack,
  Heading,
  Text,
  useToast,
  useColorModeValue,
  Link as ChakraLink,
} from '@chakra-ui/react';
import axios from 'axios';
import NextLink from 'next/link';
import { motion } from "framer-motion";
import dynamic from 'next/dynamic';

const DynamicPasswordRequirements = dynamic(
  () => import("../../../components/accounts/PasswordRequirements"),
  { ssr: false }
);

const ResetPassword = () => {
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const router = useRouter();
  const { uid, token } = router.query;
  const toast = useToast();
  const bgColor = useColorModeValue("white", "gray.800");

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (password !== confirmPassword) {
      toast({
        title: 'Passwords do not match',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return;
    }

    setIsLoading(true);
    try {
      const response = await axios.post(`http://localhost:8000/api/reset-password/${uid}/${token}/`, {
        password,
        confirm_password: confirmPassword,
      });
      toast({
        title: 'Password reset successful',
        description: 'You can now log in with your new password.',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
      router.push('/login');
    } catch (error) {
      toast({
        title: 'Password reset failed',
        description: error.response?.data?.error || 'An error occurred. Please try again.',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Box bg={bgColor} p={8} rounded="lg" shadow="md" maxW="md" mx="auto">
        <VStack spacing={4} align="stretch">
          <Heading>Reset Password</Heading>
          <form onSubmit={handleSubmit}>
            <VStack spacing={4}>
              <FormControl isRequired>
                <FormLabel>New Password</FormLabel>
                <Input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                />
                <DynamicPasswordRequirements password={password} />
              </FormControl>
              <FormControl isRequired>
                <FormLabel>Confirm New Password</FormLabel>
                <Input
                  type="password"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                />
              </FormControl>
              <Button 
                type="submit" 
                colorScheme="blue" 
                isLoading={isLoading}
                isDisabled={!password || password !== confirmPassword}
              >
                Reset Password
              </Button>
            </VStack>
          </form>
          <Text mt={4}>
            Remember your password?{" "}
            <NextLink href="/login" passHref legacyBehavior>
            <ChakraLink color="blue.500">Login here</ChakraLink>
          </NextLink>
          </Text>
        </VStack>
      </Box>
    </motion.div>
  );
};

export default ResetPassword;

================
File: src\pages\_app.js
================
import { ChakraProvider, extendTheme } from "@chakra-ui/react";
import { useEffect } from 'react';
import { Provider, useDispatch } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { store, persistor } from "../redux/store";
import Layout from "../components/layout/Layout";
import LoadingSpinner from "../components/layout/LoadingSpinner";
import { fetchUser } from "../redux/auth/authActions";

const theme = extendTheme({
  colors: {
    brand: {
      50: "#E6FFFA",
      100: "#B2F5EA",
      500: "#319795",
      900: "#234E52",
    },
  },
  fonts: {
    heading: "Poppins, sans-serif",
    body: "Inter, sans-serif",
  },
  styles: {
    global: {
      body: {
        bg: "gray.50",
      },
    },
  },
});

function AppContent({ Component, pageProps }) {
  const dispatch = useDispatch();

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      dispatch(fetchUser());
    }
  }, [dispatch]);

  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
}

function MyApp({ Component, pageProps }) {
  return (
    <Provider store={store}>
      <PersistGate loading={<LoadingSpinner />} persistor={persistor}>
        <ChakraProvider theme={theme}>
          <AppContent Component={Component} pageProps={pageProps} />
        </ChakraProvider>
      </PersistGate>
    </Provider>
  );
}

export default MyApp;

================
File: src\redux\admin\adminActions.js
================
import axios from '../../utils/axiosConfig';
import {
  fetchUsersStart,
  fetchUsersSuccess,
  fetchUsersFailure,
  activateUserSuccess,
  changeUserRoleSuccess,
} from './adminSlice';

export const fetchUsers = () => async (dispatch) => {
  dispatch(fetchUsersStart());
  try {
    const response = await axios.get('/api/institution-users/');
    dispatch(fetchUsersSuccess(response.data));
  } catch (error) {
    if (error.response && error.response.status === 401) {
      dispatch(fetchUsersFailure('Unauthorized: Please check your login status and permissions.'));
    } else {
      dispatch(fetchUsersFailure(error.response?.data?.message || 'An error occurred while fetching users'));
    }
  }
};

export const activateUser = (userId) => async (dispatch) => {
  try {
    await axios.post(`/api/activate-user/${userId}/`);
    dispatch(activateUserSuccess(userId));
  } catch (error) {
    throw new Error(error.response?.data?.message || 'An error occurred while activating the user');
  }
};

export const changeUserRole = (userId, newRole) => async (dispatch) => {
  try {
    await axios.post('/api/manage-roles/', { user_id: userId, role: newRole });
    dispatch(changeUserRoleSuccess({ userId, newRole }));
  } catch (error) {
    throw new Error(error.response?.data?.message || 'An error occurred while changing the user role');
  }
};

================
File: src\redux\admin\adminSlice.js
================
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  users: [],
  loading: false,
  error: null,
};

const adminSlice = createSlice({
  name: 'admin',
  initialState,
  reducers: {
    fetchUsersStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    fetchUsersSuccess: (state, action) => {
      state.loading = false;
      state.users = action.payload;
    },
    fetchUsersFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    activateUserSuccess: (state, action) => {
      const index = state.users.findIndex(user => user.id === action.payload);
      if (index !== -1) {
        state.users[index].is_active = true;
      }
    },
    changeUserRoleSuccess: (state, action) => {
      const index = state.users.findIndex(user => user.id === action.payload.userId);
      if (index !== -1) {
        state.users[index].role = action.payload.newRole;
      }
    },
  },
});

export const {
  fetchUsersStart,
  fetchUsersSuccess,
  fetchUsersFailure,
  activateUserSuccess,
  changeUserRoleSuccess,
} = adminSlice.actions;

export default adminSlice.reducer;

================
File: src\redux\auth\authActions.js
================
import axios from '../../utils/axiosConfig';
import { 
  loginStart, 
  loginSuccess, 
  loginFailure, 
  logoutStart, 
  logoutSuccess,
  registerStart, 
  registerSuccess, 
  registerFailure,
  resetAuthState,
  updateUser,
  forgotPasswordStart,
  forgotPasswordSuccess,
  forgotPasswordFailure,
} from './authSlice';
import Router from 'next/router';

export const login = (email, password, rememberMe) => async (dispatch) => {
  dispatch(loginStart());
  try {
    const response = await axios.post('/api/token/', { email, password });
    const { access, refresh, user } = response.data;
    if (rememberMe) {
      localStorage.setItem('token', access);
      localStorage.setItem('refreshToken', refresh);
    } else {
      sessionStorage.setItem('token', access);
      sessionStorage.setItem('refreshToken', refresh);
    }
    dispatch(loginSuccess({ user, token: access }));
    // Don't use Router.push here, let the component handle navigation
    return user;
  } catch (error) {
    dispatch(loginFailure(error.response?.data?.detail || 'Login failed'));
    throw error;
  }
};

export const registerUser = (userData) => async (dispatch) => {
  dispatch(registerStart());
  try {
    const response = await axios.post('/api/register/', userData);
    dispatch(registerSuccess());
    return response.data;
  } catch (error) {
    const errorMessage = error.response?.data?.detail || error.response?.data?.error || 'Registration failed';
    dispatch(registerFailure(errorMessage));
    throw error;
  }
};

export const logoutUser = () => async (dispatch) => {
  dispatch(logoutStart());
  localStorage.removeItem('token');
  localStorage.removeItem('refreshToken');
  await dispatch(logoutSuccess());
  await Router.push('/login');
};

export const fetchUser = () => async (dispatch) => {
  const token = localStorage.getItem('token');
  if (token) {
    try {
      const response = await axios.get('/api/user/');
      dispatch(loginSuccess({ user: response.data, token }));
    } catch (error) {
      console.error('Error fetching user:', error);
      dispatch(logoutSuccess());
    }
  } else {
    dispatch(logoutSuccess());
  }
};

export const resetAuth = () => (dispatch) => {
  dispatch(resetAuthState());
};

export const updateUserProfile = (userData) => async (dispatch) => {
  try {
    const response = await axios.patch('/api/user/', userData);
    dispatch(updateUser(response.data));
    return response.data;
  } catch (error) {
    throw error;
  }
};

export const forgotPassword = (email) => async (dispatch) => {
  dispatch(forgotPasswordStart());
  try {
    const response = await axios.post('/api/forgot-password/', { email });
    dispatch(forgotPasswordSuccess());
    return response.data;
  } catch (error) {
    const errorMessage = error.response?.data?.detail || error.response?.data?.error || 'Failed to send reset password link';
    dispatch(forgotPasswordFailure(errorMessage));
    throw error;
  }
};

================
File: src\redux\auth\authSlice.js
================
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  user: null,
  token: null,
  loading: false,
  loggingOut: false,
  error: null,
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    loginStart: (state) => {
      state.loggingIn = true;
      state.error = null;
    },
    loginSuccess: (state, action) => {
      state.loading = false;
      state.loggingIn = false;  // Keep this as is
      state.user = action.payload.user;
      state.token = action.payload.token;
      state.error = null;
    },
    loginFailure: (state, action) => {
      state.loggingIn = false;
      state.error = action.payload;
    },
    logoutStart: (state) => {
      state.loggingOut = true;
    },
    logoutSuccess: (state) => {
      state.user = null;
      state.token = null;
      state.loggingOut = false;
      state.loggingIn = false;
      state.loading = false;
      state.error = null;
    },
    registerStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    registerSuccess: (state) => {
      state.loading = false;
      state.error = null;
    },
    registerFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    resetAuthState: (state) => {
      state.loading = false;
      state.error = null;
    },
    forgotPasswordStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    forgotPasswordSuccess: (state) => {
      state.loading = false;
    },
    forgotPasswordFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    updateUser: (state, action) => {
      state.user = { ...state.user, ...action.payload };
    },
    setLoading: (state, action) => {
      state.loading = action.payload;
    },
  },
});

export const {
  loginStart,
  loginSuccess,
  loginFailure,
  logoutStart,
  logoutSuccess,
  registerStart,
  registerSuccess,
  registerFailure,
  resetAuthState,
  updateUser,
  forgotPasswordStart,
  forgotPasswordSuccess,
  forgotPasswordFailure,
  setLoading,
} = authSlice.actions;

export default authSlice.reducer;

================
File: src\redux\campaigns\campaignsActions.js
================
import {
  fetchCampaignsStart,
  fetchCampaignsSuccess,
  fetchCampaignsFailure,
  fetchCampaignSuggestionsSuccess,
  fetchCampaignPerformanceSuccess,
} from './campaignsSlice';
import { 
  mockCampaignSuggestions, 
  mockCampaignPerformance 
} from '../../utils/mockData';

export const fetchCampaigns = () => async (dispatch) => {
  dispatch(fetchCampaignsStart());
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    // For now, we'll just return an empty array as we don't have mock data for all campaigns
    dispatch(fetchCampaignsSuccess([]));
  } catch (error) {
    dispatch(fetchCampaignsFailure('Failed to fetch campaigns'));
  }
};

export const fetchCampaignSuggestions = () => async (dispatch) => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    dispatch(fetchCampaignSuggestionsSuccess(mockCampaignSuggestions));
    return mockCampaignSuggestions;
  } catch (error) {
    console.error('Failed to fetch campaign suggestions:', error);
    throw error;
  }
};

export const fetchCampaignPerformance = () => async (dispatch) => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    dispatch(fetchCampaignPerformanceSuccess(mockCampaignPerformance));
    return mockCampaignPerformance;
  } catch (error) {
    console.error('Failed to fetch campaign performance:', error);
    throw error;
  }
};

export const createCampaign = (campaignData) => async (dispatch) => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    // In a real scenario, we would send the campaignData to the server and get a response
    // For now, we'll just log the data and refresh the campaigns
    console.log('Creating campaign:', campaignData);
    dispatch(fetchCampaigns());
  } catch (error) {
    console.error('Failed to create campaign:', error);
    throw error;
  }
};

================
File: src\redux\campaigns\campaignsSlice.js
================
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  campaigns: [],
  campaignSuggestions: [],
  campaignPerformance: [],
  loading: false,
  error: null,
};

const campaignsSlice = createSlice({
  name: 'campaigns',
  initialState,
  reducers: {
    fetchCampaignsStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    fetchCampaignsSuccess: (state, action) => {
      state.loading = false;
      state.campaigns = action.payload;
    },
    fetchCampaignsFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    fetchCampaignSuggestionsSuccess: (state, action) => {
      state.campaignSuggestions = action.payload;
    },
    fetchCampaignPerformanceSuccess: (state, action) => {
      state.campaignPerformance = action.payload;
    },
  },
});

export const {
  fetchCampaignsStart,
  fetchCampaignsSuccess,
  fetchCampaignsFailure,
  fetchCampaignSuggestionsSuccess,
  fetchCampaignPerformanceSuccess,
} = campaignsSlice.actions;

export default campaignsSlice.reducer;

================
File: src\redux\insights\insightsActions.js
================
import {
  fetchInsightsStart,
  fetchInsightsSuccess,
  fetchInsightsFailure,
} from './insightsSlice';
import { mockInsights } from '../../utils/mockData';

export const fetchInsights = () => async (dispatch) => {
  dispatch(fetchInsightsStart());
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    dispatch(fetchInsightsSuccess(mockInsights));
    return mockInsights;
  } catch (error) {
    dispatch(fetchInsightsFailure('Failed to fetch insights'));
    throw error;
  }
};

================
File: src\redux\insights\insightsSlice.js
================
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  insights: [],
  loading: false,
  error: null,
};

const insightsSlice = createSlice({
  name: 'insights',
  initialState,
  reducers: {
    fetchInsightsStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    fetchInsightsSuccess: (state, action) => {
      state.loading = false;
      state.insights = action.payload;
    },
    fetchInsightsFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export const {
  fetchInsightsStart,
  fetchInsightsSuccess,
  fetchInsightsFailure,
} = insightsSlice.actions;

export default insightsSlice.reducer;

================
File: src\redux\members\membersActions.js
================
import {
  fetchMembersStart,
  fetchMembersSuccess,
  fetchMembersFailure,
  fetchMemberInsightsSuccess,
  fetchChurnDistributionSuccess,
  fetchMemberSegmentsSuccess,
} from './membersSlice';
import { 
  mockMemberInsights, 
  mockChurnDistribution, 
  mockMemberSegments 
} from '../../utils/mockData';

export const fetchMembers = () => async (dispatch) => {
  dispatch(fetchMembersStart());
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    // For now, we'll just return an empty array as we don't have mock data for all members
    dispatch(fetchMembersSuccess([]));
  } catch (error) {
    dispatch(fetchMembersFailure('Failed to fetch members'));
  }
};

export const fetchMemberInsights = () => async (dispatch) => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    dispatch(fetchMemberInsightsSuccess(mockMemberInsights));
    return mockMemberInsights;
  } catch (error) {
    console.error('Failed to fetch member insights:', error);
    throw error;
  }
};

export const fetchChurnDistribution = () => async (dispatch) => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    dispatch(fetchChurnDistributionSuccess(mockChurnDistribution));
    return mockChurnDistribution;
  } catch (error) {
    console.error('Failed to fetch churn distribution:', error);
    throw error;
  }
};

export const fetchMemberSegments = () => async (dispatch) => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    dispatch(fetchMemberSegmentsSuccess(mockMemberSegments));
    return mockMemberSegments;
  } catch (error) {
    console.error('Failed to fetch member segments:', error);
    throw error;
  }
};

================
File: src\redux\members\membersSlice.js
================
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  members: [],
  memberInsights: null,
  churnDistribution: null,
  memberSegments: null,
  loading: false,
  error: null,
};

const membersSlice = createSlice({
  name: 'members',
  initialState,
  reducers: {
    fetchMembersStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    fetchMembersSuccess: (state, action) => {
      state.loading = false;
      state.members = action.payload;
    },
    fetchMembersFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    fetchMemberInsightsSuccess: (state, action) => {
      state.memberInsights = action.payload;
    },
    fetchChurnDistributionSuccess: (state, action) => {
      state.churnDistribution = action.payload;
    },
    fetchMemberSegmentsSuccess: (state, action) => {
      state.memberSegments = action.payload;
    },
  },
});

export const {
  fetchMembersStart,
  fetchMembersSuccess,
  fetchMembersFailure,
  fetchMemberInsightsSuccess,
  fetchChurnDistributionSuccess,
  fetchMemberSegmentsSuccess,
} = membersSlice.actions;

export default membersSlice.reducer;

================
File: src\redux\metrics\metricsActions.js
================
import {
  fetchMetricsStart,
  fetchMetricsSuccess,
  fetchMetricsFailure,
} from './metricsSlice';
import { mockMetrics } from '../../utils/mockData';

export const fetchMetrics = () => async (dispatch) => {
  dispatch(fetchMetricsStart());
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    dispatch(fetchMetricsSuccess(mockMetrics));
    return mockMetrics;
  } catch (error) {
    dispatch(fetchMetricsFailure('Failed to fetch metrics'));
    throw error;
  }
};

================
File: src\redux\metrics\metricsSlice.js
================
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  metrics: {},
  loading: false,
  error: null,
};

const metricsSlice = createSlice({
  name: 'metrics',
  initialState,
  reducers: {
    fetchMetricsStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    fetchMetricsSuccess: (state, action) => {
      state.loading = false;
      state.metrics = action.payload;
    },
    fetchMetricsFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export const {
  fetchMetricsStart,
  fetchMetricsSuccess,
  fetchMetricsFailure,
} = metricsSlice.actions;

export default metricsSlice.reducer;

================
File: src\redux\performance\performanceActions.js
================
import {
  fetchPerformanceStart,
  fetchPerformanceSuccess,
  fetchPerformanceFailure,
} from './performanceSlice';
import { mockPerformance } from '../../utils/mockData';

export const fetchPerformance = () => async (dispatch) => {
  dispatch(fetchPerformanceStart());
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    dispatch(fetchPerformanceSuccess(mockPerformance));
    return mockPerformance;
  } catch (error) {
    dispatch(fetchPerformanceFailure('Failed to fetch performance data'));
    throw error;
  }
};

================
File: src\redux\performance\performanceSlice.js
================
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  performanceData: {},
  loading: false,
  error: null,
};

const performanceSlice = createSlice({
  name: 'performance',
  initialState,
  reducers: {
    fetchPerformanceStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    fetchPerformanceSuccess: (state, action) => {
      state.loading = false;
      state.performanceData = action.payload;
    },
    fetchPerformanceFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export const {
  fetchPerformanceStart,
  fetchPerformanceSuccess,
  fetchPerformanceFailure,
} = performanceSlice.actions;

export default performanceSlice.reducer;

================
File: src\redux\revenue\revenueActions.js
================
import {
    fetchRevenueStart,
    fetchRevenueSuccess,
    fetchRevenueFailure,
  } from './revenueSlice';
  import { mockRevenue } from '../../utils/mockData';
  
  export const fetchRevenue = () => async (dispatch) => {
    dispatch(fetchRevenueStart());
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 500));
      dispatch(fetchRevenueSuccess(mockRevenue));
      return mockRevenue;
    } catch (error) {
      dispatch(fetchRevenueFailure('Failed to fetch revenue data'));
      throw error;
    }
  };

================
File: src\redux\revenue\revenueSlice.js
================
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  revenueData: [],
  loading: false,
  error: null,
};

const revenueSlice = createSlice({
  name: 'revenue',
  initialState,
  reducers: {
    fetchRevenueStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    fetchRevenueSuccess: (state, action) => {
      state.loading = false;
      state.revenueData = action.payload;
    },
    fetchRevenueFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export const { fetchRevenueStart, fetchRevenueSuccess, fetchRevenueFailure } = revenueSlice.actions;

export default revenueSlice.reducer;

================
File: src\redux\rootReducer.js
================
import { combineReducers } from '@reduxjs/toolkit';
import authReducer from './auth/authSlice';
import metricsReducer from './metrics/metricsSlice';
import revenueReducer from './revenue/revenueSlice';
import performanceReducer from './performance/performanceSlice';
import insightsReducer from './insights/insightsSlice';
import membersReducer from './members/membersSlice';
import campaignsReducer from './campaigns/campaignsSlice';
import settingsReducer from './settings/settingsSlice';
import adminReducer from './admin/adminSlice';

const rootReducer = combineReducers({
  auth: authReducer,
  metrics: metricsReducer,
  revenue: revenueReducer,
  performance: performanceReducer,
  insights: insightsReducer,
  members: membersReducer,
  campaigns: campaignsReducer,
  settings: settingsReducer,
  admin: adminReducer,
});

export default rootReducer;

================
File: src\redux\settings\settingsActions.js
================
import axios from 'axios';
import {
  fetchSettingsStart,
  fetchSettingsSuccess,
  fetchSettingsFailure,
  updateAISettings,
  updateUIPreferences,
} from './settingsSlice';

export const fetchSettings = () => async (dispatch) => {
  dispatch(fetchSettingsStart());
  try {
    const response = await axios.get('/api/settings');
    dispatch(fetchSettingsSuccess(response.data));
    return response.data;
  } catch (error) {
    dispatch(fetchSettingsFailure(error.response?.data?.message || 'Failed to fetch settings'));
    throw error;
  }
};

export const updateAISettingsAction = (settings) => async (dispatch) => {
  try {
    const response = await axios.put('/api/settings/ai', settings);
    dispatch(updateAISettings(response.data));
    return response.data;
  } catch (error) {
    console.error('Failed to update AI settings:', error);
    throw error;
  }
};

export const updateUIPreferencesAction = (preferences) => async (dispatch) => {
  try {
    const response = await axios.put('/api/settings/ui', preferences);
    dispatch(updateUIPreferences(response.data));
    return response.data;
  } catch (error) {
    console.error('Failed to update UI preferences:', error);
    throw error;
  }
};

================
File: src\redux\settings\settingsSlice.js
================
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  aiSettings: {},
  uiPreferences: {},
  loading: false,
  error: null,
};

const settingsSlice = createSlice({
  name: 'settings',
  initialState,
  reducers: {
    fetchSettingsStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    fetchSettingsSuccess: (state, action) => {
      state.loading = false;
      state.aiSettings = action.payload.aiSettings;
      state.uiPreferences = action.payload.uiPreferences;
    },
    fetchSettingsFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    updateAISettings: (state, action) => {
      state.aiSettings = { ...state.aiSettings, ...action.payload };
    },
    updateUIPreferences: (state, action) => {
      state.uiPreferences = { ...state.uiPreferences, ...action.payload };
    },
  },
});

export const {
  fetchSettingsStart,
  fetchSettingsSuccess,
  fetchSettingsFailure,
  updateAISettings,
  updateUIPreferences,
} = settingsSlice.actions;

export default settingsSlice.reducer;

================
File: src\redux\store.js
================
import { configureStore } from '@reduxjs/toolkit';
import { persistStore, persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage';
import rootReducer from './rootReducer';

const persistConfig = {
  key: 'root',
  storage,
  whitelist: ['auth','settings'], // Persist these reducers
};

const persistedReducer = persistReducer(persistConfig, rootReducer);

export const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: ['persist/PERSIST']
      }
    })
});

export const persistor = persistStore(store);

================
File: src\styles\global.css
================
img {
  max-width: 100%;
  height: auto;
}

================
File: src\styles\Home.module.css
================
.container {
  min-height: 100vh;
  padding: 0 0.5rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0 0 1rem;
  line-height: 1.15;
  font-size: 3.6rem;
}

.title {
  text-align: center;
}

.title,
.description {
  text-align: center;
}

.description {
  line-height: 1.5;
  font-size: 1.5rem;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;

  max-width: 800px;
  margin-top: 3rem;
}

.card {
  margin: 1rem;
  flex-basis: 45%;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition:
    color 0.15s ease,
    border-color 0.15s ease;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h3 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

================
File: src\styles\utils.module.css
================
.heading2Xl {
    font-size: 2.5rem;
    line-height: 1.2;
    font-weight: 800;
    letter-spacing: -0.05rem;
    margin: 1rem 0;
  }
  
  .headingXl {
    font-size: 2rem;
    line-height: 1.3;
    font-weight: 800;
    letter-spacing: -0.05rem;
    margin: 1rem 0;
  }
  
  .headingLg {
    font-size: 1.5rem;
    line-height: 1.4;
    margin: 1rem 0;
  }
  
  .headingMd {
    font-size: 1.2rem;
    line-height: 1.5;
  }
  
  .borderCircle {
    border-radius: 9999px;
  }
  
  .colorInherit {
    color: inherit;
  }
  
  .padding1px {
    padding-top: 1px;
  }
  
  .list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .listItem {
    margin: 0 0 1.25rem;
  }
  
  .lightText {
    color: #666;
  }

================
File: src\theme.js
================
import { extendTheme } from "@chakra-ui/react";

const theme = extendTheme({
  colors: {
    primary: {
      100: "#E3E6F3",
      200: "#C7CDE7",
      300: "#ABB4DA",
      400: "#8F9BCF",
      500: "#7382C2",
      600: "#5769B6",
      700: "#3B51A9",
      800: "#1F399D",
      900: "#002091",
    },
    secondary: {
      100: "#E0F7F8",
      200: "#C1F0F1",
      300: "#A1E8EB",
      400: "#82E1E5",
      500: "#62D9DE",
      600: "#42D1D8",
      700: "#22C9D1",
      800: "#02C1CB",
      900: "#00B9C4",
    },
  },
});

export default theme;

================
File: src\utils\axiosConfig.js
================
import axios from 'axios';

const instance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',
  withCredentials: true,
});

instance.interceptors.request.use(
  (config) => {
    // Don't send the token for registration requests
    if (!config.url.endsWith('/register/')) {
      const token = localStorage.getItem('token');
      if (token) {
        config.headers['Authorization'] = `Bearer ${token}`;
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default instance;

================
File: src\utils\mockData.js
================
export const mockMetrics = {
    total_revenue: 250000,
    active_members: 1200,
    retention_rate: 85,
    net_promoter_score: 72,
    new_signups: 120,
    avg_daily_visits: 345,
  };
  
  export const mockInsights = [
    { id: 1, text: "Revenue increased by 12%", category: "revenue", positive: true },
    { id: 2, text: "15 members at risk of churning", category: "retention", positive: false },
    { id: 3, text: "Gym class attendance up by 20%", category: "engagement", positive: true },
  ];
  
  export const mockPerformance = {
    revenue_growth: "8.2%",
    member_retention: "85%",
    avg_revenue_per_member: "$208",
    customer_satisfaction: "4.5/5",
  };
  
  export const mockRevenue = [
    { month: 'Jan', revenue: 4000, lastYear: 3500 },
    { month: 'Feb', revenue: 3000, lastYear: 2800 },
    { month: 'Mar', revenue: 5000, lastYear: 4200 },
    { month: 'Apr', revenue: 4500, lastYear: 3900 },
    { month: 'May', revenue: 6000, lastYear: 5100 },
    { month: 'Jun', revenue: 5500, lastYear: 4800 },
  ];

  export const mockMemberInsights = [
    { id: 1, insight: "20% of members haven't visited in the last 30 days", category: "attendance" },
    { id: 2, insight: "Members who attend classes are 30% less likely to churn", category: "retention" },
    { id: 3, insight: "Weekend attendance has increased by 15% this month", category: "attendance" }
  ];
  
  export const mockChurnDistribution = [
    { risk: "Low", count: 500 },
    { risk: "Medium", count: 300 },
    { risk: "High", count: 200 }
  ];
  
  export const mockMemberSegments = [
    { name: "Frequent Visitors", percentage: 40 },
    { name: "Class Enthusiasts", percentage: 30 },
    { name: "Occasional Users", percentage: 20 },
    { name: "At Risk", percentage: 10 }
  ];

  export const mockCampaignSuggestions = [
    {
      id: 1,
      title: "Re-engage Inactive Members",
      description: "Target members who haven't visited in 30 days with a special offer.",
      predictedImpact: "15% increase in revisits"
    },
    {
      id: 2,
      title: "Promote New Yoga Classes",
      description: "Highlight our new yoga classes to members interested in mindfulness.",
      predictedImpact: "20% increase in class attendance"
    },
    {
      id: 3,
      title: "Referral Program Boost",
      description: "Offer a discount to members who refer a friend during the next month.",
      predictedImpact: "10% increase in new member signups"
    }
  ];
  
  export const mockCampaignPerformance = [
    {
      id: 1,
      name: "Summer Fitness Challenge",
      status: "Active",
      sent: 1000,
      opened: 650,
      clicked: 300,
      converted: 75
    },
    {
      id: 2,
      name: "Personal Training Promotion",
      status: "Completed",
      sent: 800,
      opened: 600,
      clicked: 250,
      converted: 50
    },
    {
      id: 3,
      name: "Membership Renewal Reminder",
      status: "Active",
      sent: 500,
      opened: 450,
      clicked: 200,
      converted: 180
    }
  ];
